{"version":3,"file":"8422.3edb312db1e170e3d561.js","mappings":"gWAwFA,MAGMA,EAA2C,CAC/CC,GAAIC,EAAAA,IACJC,WAAY,IACZC,KAAM,kBACNC,OAAO,EACPC,YAAa,IAETC,EAA4B,IAAIC,IAAI,CACxC,mBACA,qBACA,qBAGIC,GAA8BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAM,GAC3DC,GAA8BC,EAAAA,EAAAA,KAAUF,GAAOA,KAAM,KAAK,GAAO,GA0iEvEG,eAAeC,EACbC,EACAC,EACAC,GAGA,IAFAC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACbG,EAAyBH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAGrBE,GAASC,EAAAA,EAAAA,MACTC,GAA0BC,EAAAA,EAAAA,IAA8BH,IAASI,QACrE,MAAMC,QAAeC,EAAAA,EAAAA,IAAQ,aAAc,CACzCC,MAAOC,EAAAA,IACPd,aACAe,SAAuB,aAAbjB,EACVkB,WAAYf,EACZO,4BAGF,IAAKG,EACH,OAGF,MAAM,QAAEM,GAAYN,EAUpB,GARIM,EAAQd,OAAS,GAAKc,EAAQ,KAAOlB,GACvCkB,EAAQC,QAGVZ,GAASC,EAAAA,EAAAA,MAETC,GAA0BC,EAAAA,EAAAA,IAA8BH,IAASI,QAE7DT,GAA8B,WAAbH,EAAuB,CAE1C,IAAKmB,EAAQE,SAASnC,EAAAA,KAAgC,CACpD,MAAMoC,QAAgBR,EAAAA,EAAAA,IAAQ,YAAa,CACzC1B,KAAM,OACNmC,KAAMvC,IAGRwB,GAASC,EAAAA,EAAAA,MAET,MAAMe,EAAoBF,IAAWG,EAAAA,EAAAA,IAAWjB,EAAQc,EAAQI,QAC5DF,IACFL,EAAQQ,QAAQH,EAAkBvC,IAClC4B,EAAOe,MAAMD,QAAQH,GACjBd,IACFc,EAAkBK,YAAcnB,GAGtC,CAEA,MAAMoB,EAAYC,OAAOC,OAAOxB,EAAOyB,SACjCC,EAAeJ,EAAUK,SAAQC,IAAmB,IAAhBnD,GAAIoD,GAAOD,EACnD,MAAME,GAAcC,EAAAA,EAAAA,IAAkB/B,EAAQ6B,GAC9C,OAAOC,EAAc,CAACA,GAAe,EAAE,IAGnCE,EAAeV,EAAUK,SAAQM,IAAmB,IAAhBxD,GAAIoD,GAAOI,EACnD,OAAOC,EAAAA,EAAAA,IAAmBlC,EAAQ6B,IAAU,EAAE,IAG5C7B,EAAOmC,eAAiBnC,EAAOoC,MAAMC,KAAKrC,EAAOmC,gBACnDH,EAAaM,KAAKtC,EAAOoC,MAAMC,KAAKrC,EAAOmC,gBAG7CnC,GAASuC,EAAAA,EAAAA,IAAavC,GAAQwC,EAAAA,EAAAA,IAAqBR,EAAaS,OAAOpC,EAAO+B,OAAQ,OACtFpC,GAAS0C,EAAAA,EAAAA,IAAoB1C,EAAQK,EAAOsC,kBAC5C3C,GAAS4C,EAAAA,EAAAA,IAAa5C,GAAQwC,EAAAA,EAAAA,IAAqBd,EAAae,OAAOpC,EAAOe,OAAQ,OACtFpB,GAAS6C,EAAAA,EAAAA,IAAmB7C,EAAQR,EAAUmB,EAChD,MAAO,GAAIhB,GAA8B,aAAbH,EAC1BQ,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAAS+C,EAAAA,EAAAA,IAAgB/C,EAAQK,EAAOsC,kBACxC3C,GAASgD,EAAAA,EAAAA,IAAYhD,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,OAChEpB,GAAS6C,EAAAA,EAAAA,IAAmB7C,EAAQR,EAAUmB,OACzC,CACL,MAAMsC,GAAWT,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,MACpD,GAAIT,EAAQE,SAASnC,EAAAA,KAAgC,CACnD,MAAMsC,EAAoBiC,EAASvE,EAAAA,KAC/BsC,GAAqBd,IACvB+C,EAASvE,EAAAA,KAAiC,IACrCsC,EACHK,YAAanB,GAGnB,CAEAF,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAAS+C,EAAAA,EAAAA,IAAgB/C,EAAQK,EAAOsC,kBACxC3C,GAASgD,EAAAA,EAAAA,IAAYhD,EAAQiD,GAC7BjD,GAASkD,EAAAA,EAAAA,IAAkBlD,EAAQR,EAAUmB,EAC/C,CAEAX,GAASmD,EAAAA,EAAAA,IAA4BnD,EAAQR,EAAUa,IAE9BN,EAAkBM,EAAOM,QAAUY,OAAO6B,KAAK/C,EAAOgD,aAC9DC,SAASpC,IACxB,MAAMqC,EAAQlD,EAAOgD,WAAWnC,GAC1BsC,GAASC,EAAAA,EAAAA,IAAazD,EAAQkB,EAAQwC,EAAAA,KAEvCH,GAAUC,MAEVG,EAAAA,EAAAA,IAAY3D,EAAQkB,EAAQwC,EAAAA,KAAiBE,UAChD5D,GAAS6D,EAAAA,EAAAA,IACP7D,EAAQkB,EAAQwC,EAAAA,GAAgB,QAASH,IAE7C,KAG8BxD,EAAkBM,EAAOM,QAAUY,OAAO6B,KAAK/C,EAAOyD,iBAC9DR,SAASpC,IAC/B,MAAM4C,EAAiBzD,EAAOyD,eAAe5C,GACvCsC,GAASC,EAAAA,EAAAA,IAAazD,EAAQkB,EAAQwC,EAAAA,KAEvCI,GAAmBN,KAExBxD,GAAS6D,EAAAA,EAAAA,IACP7D,EAAQkB,EAAQwC,EAAAA,GAAgB,eAAgBI,GACjD,IAGoB,IAAnBnD,EAAQd,QAAiBG,EAAOoB,MAAM2C,cAAcvE,KACtDQ,EAAS,IACJA,EACHoB,MAAO,IACFpB,EAAOoB,MACV2C,cAAe,IACV/D,EAAOoB,MAAM2C,cAChB,CAACvE,IAAW,OAMpBwE,EAAAA,EAAAA,IAAUhE,EACZ,CAEOV,eAAe2E,EACpBjE,EAAWkE,EAAgCC,GAE3C,QAAAC,EAAAxE,UAAAC,OAAAwE,EAAA,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,EAAA,GAAA3E,UAAA2E,GAAA,IADI1C,GAAQ2C,EAAAA,EAAAA,OAAkBH,EAE9B,MAAMhE,QAAeC,EAAAA,EAAAA,IAAQ,gBAAiB6D,GAC9C,IAAK9D,EACH,OAGF,MAAM,MACJ+B,EAAK,iBAAEO,EAAgB,SAAE8B,EAAQ,UAAEC,EAAS,aAAEC,GAC5CtE,EAWJ,GATAL,GAASC,EAAAA,EAAAA,MACLmC,IACFpC,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBJ,EAAO,QAGpDO,IACF3C,GAAS+C,EAAAA,EAAAA,IAAgB/C,EAAQ2C,IAG/B+B,EAAW,CACb,MAAME,GAAoBC,EAAAA,EAAAA,IAAgB7E,EAAQ0E,EAAUjG,IAC5DuB,GAAS8E,EAAAA,EAAAA,IACP9E,EACA0E,EAAUjG,IACVsG,EAAAA,EAAAA,IAAKL,EAAW,CAAC,kBAAmB,kBACpC5E,EACA8E,OAAoB9E,EAAY4E,EAAUM,kBAE9C,MAEqBlF,IAAjB6E,IACF3E,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQmE,EAAK1F,GAAI,CAAEkG,kBAEzC3E,GAASkF,EAAAA,EAAAA,IAAoBlF,EAAQmE,EAAK1F,GAAIgG,IAC9CT,EAAAA,EAAAA,IAAUhE,GAEV,MAAMmF,EAAaV,EAASU,WAW5B,OAVIA,GACFjB,EAAQkB,aAAa,CACnBC,eAAgB,CACd5G,GAAI0G,EAAW1G,GACfE,WAAYwG,EAAWxG,YAEzBkD,UAIGxB,CACT,CAqBOf,eAAegG,EACpBtF,EACAuF,GAEAvF,GAASC,EAAAA,EAAAA,MACT,MAAMuF,GAAYC,EAAAA,EAAAA,IAAqBzF,EAAQuF,GAC/C,GAAIC,IAAcA,EAAU3G,MAC1B,OAAO2G,EAGT,MAAM,KAAErB,EAAI,KAAEpD,SAAeT,EAAAA,EAAAA,IAAQ,oBAAqBiF,IAAa,CAAC,EACxE,OAAKpB,GAILnE,GAASC,EAAAA,EAAAA,MACTD,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQmE,EAAK1F,GAAI0F,GACjCpD,IACFf,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQe,EAAKtC,GAAIsC,KAGvCiD,EAAAA,EAAAA,IAAUhE,GAEHmE,QAZP,CAaF,CA0BA7E,eAAeqG,EACb3F,EAAWkE,EAAgCqB,GAE3C,QAAAK,EAAAhG,UAAAC,OAAAgG,EAAA,IAAAvB,MAAAsB,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAlG,UAAAkG,GAAA,IADIjE,GAAQ2C,EAAAA,EAAAA,OAAkBqB,EAE9B,MAAM1B,QAAamB,EAAoBtF,EAAQuF,GAC/C,IAAKpB,EAAM,OAEXnE,GAASC,EAAAA,EAAAA,MACT,MAAMc,GAAOgF,EAAAA,EAAAA,IAAW/F,EAAQmE,EAAK1F,IACrC,IAAKsC,EAAM,OAGX,KADciF,EAAAA,EAAAA,IAAUjF,GACZ,OACZ,MAAMV,QAAeC,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C2F,IAAKlF,IAIP,GADAf,GAASC,EAAAA,EAAAA,MACJI,EAYL,OAHAL,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,QAC7D4B,EAAAA,EAAAA,IAAUhE,GAEHK,EAAO4F,IAXZ/B,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,0CAChCtE,SAUN,CAmEAvC,eAAe8G,EACbpG,EACAkE,EACAhD,EACAmF,EACAC,GAEA,QAAAC,EAAA3G,UAAAC,OAAA2G,EAAA,IAAAlC,MAAAiC,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAA7G,UAAA6G,GAAA,IADI5E,GAAQ2C,EAAAA,EAAAA,OAAkBgC,EAE9BxG,GAASC,EAAAA,EAAAA,MACT,MAAMgG,QAAYN,EAAqB3F,EAAQkE,EAASmC,EAAQxE,GAC3DoE,GAEL/B,EAAQwC,cAAc,CACpBT,MACA/E,YAC2B,iBAAhBoF,GAA4B,CAAEK,WAAYL,GACrDzE,SAEJ,CAEOvC,eAAesH,EACpB5G,EACAkE,EACAhD,GAEA,QAAA2F,EAAAjH,UAAAC,OAAAiH,EAAA,IAAAxC,MAAAuC,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAnH,UAAAmH,GAAA,IADIlF,GAAQ2C,EAAAA,EAAAA,OAAkBsC,EAE9B,MAAM3C,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,KAAS6C,EAAAA,EAAAA,IAAiB7C,GAC7B,OAAOA,EAGT,MAAM8C,QAtMD3H,eACLU,EAAWkE,EAAgCC,GAEb,QAAA+C,EAAAtH,UAAAC,OAAAsH,EAAA,IAAA7C,MAAA4C,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAxH,UAAAwH,GAAA,IAD1BvF,GAAQ2C,EAAAA,EAAAA,OAAkB2C,EAE9B,IAGE,aAFyB7G,EAAAA,EAAAA,IAAQ,cAAe6D,EAGlD,CAAE,MAAOkD,GAOP,YANoC,sBAA/BA,EAAmBjH,QACtB8D,EAAQoD,sBAAsB,CAAE/G,MAAO,WAAYsB,UAEnDqC,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5F,UAI9E,CACF,CAqLwB6F,CAAY1H,EAAQkE,EAASC,EAAMtC,GACzD,OAAKoF,GAIL/C,EAAQD,aAAa,CAAE/C,OAAQ+F,EAAQxI,GAAIoD,UAC3CqC,EAAQyD,SAAS,CAAElJ,GAAIwI,EAAQxI,GAAIoD,UAE5BoF,QAPP,CAQF,EAr7EAW,EAAAA,EAAAA,IAAiB,0BAA0BtI,MAAOU,EAAQkE,KACxD,MAAM2D,EAAmB,IAAI7I,IAE7B,IAAK,IAAI8I,EAAI,EAAGA,EAAIC,EAAAA,IAAiCD,IAAK,OAClDE,EAAAA,EAAAA,IAvBiC,KAyBvChI,GAASC,EAAAA,EAAAA,MACT,MAAMgI,EAAiB1G,OAAOC,OAAOxB,EAAOyB,SAEzCyG,KAAIC,IAAA,IAAG1J,GAAIoD,GAAOsG,EAAA,OAAKC,EAAAA,EAAAA,IAAyBpI,EAAQ6B,IAAQX,MAAM,IACtEmH,OAAOC,SAEJC,GAAsBC,EAAAA,EAAAA,IAAcC,EAAAA,KACpCC,EAAaH,GAAqBI,MAAMlK,IAAQwJ,EAAepH,SAASpC,KAAQoJ,EAAiBe,IAAInK,KAC3G,IAAKiK,EACH,OAGFb,EAAiBgB,IAAIH,GAErBxE,EAAQ4E,qBAAqB,CAAE5H,OAAQwH,EAAYK,SAAUrF,EAAAA,GAAgB7B,OAAO2C,EAAAA,EAAAA,OACtF,MAGFoD,EAAAA,EAAAA,IAAiB,YAAY,CAAC5H,EAAQkE,EAAS8E,KAC7C,MAAM,GACJvK,EAAE,SAAEsK,EAAWrF,EAAAA,GAAc,0BAAEuF,EAAyB,MAAEpH,GAAQ2C,EAAAA,EAAAA,OAChEwE,EAEEE,GAAqBd,EAAAA,EAAAA,IAAyBpI,EAAQ6B,GACtDsH,EAAgBD,GAAoBhI,OACpCkI,EAAkBF,GAAoBH,SAE5C,GAAII,IAAkBA,IAAkB1K,GAAM2K,IAAoBL,GAAW,CAC3E,MAAOM,EAAcC,GAAkB/H,OAAOC,OAAOxB,EAAOyB,SACzD8H,QAAO,CAAAC,EAAAC,KAAgE,IAA9DC,EAAkBC,GAAmBH,GAAI/K,GAAImL,GAAYH,EACjE,GAAIG,IAAe/H,GAAU6H,GAAoBC,EAC/C,MAAO,CAACD,EAAkBC,GAG5B,MAAME,GAAmBzB,EAAAA,EAAAA,IAAyBpI,EAAQ4J,GACpDE,EAAaD,GAAkB3I,SAAWiI,EAGhD,MAAO,CAACO,GAAoBI,EAAYH,GAFnBG,GAAcD,GAAkBd,WAAaK,EAES,GAC1E,CAACD,IAAkB1K,GAAI,MAEK4K,IAAiBC,KAGhDhJ,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEY,OAAQiI,EAAeJ,SAAUM,EAAeD,OAAkBtJ,GAErG,CAEA,IAAKrB,EACH,OAGF,MAAM,cAAE0D,GAAkBnC,EACpBmE,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQvB,GAMhC,GAJI0F,GAAM4F,eACR7F,EAAQ8F,iBAAiB,CAAEvL,OAGxB0F,GASM8F,EAAAA,EAAAA,IAAkB9F,KAAUA,EAAKtF,OAC1CqF,EAAQgG,kBAAkB,CAAEhJ,OAAQzC,SATpC,GAAIA,IAAO0D,GACJ7B,EAAAA,EAAAA,IAAQ,YAAa,CAAE1B,KAAM,aAC7B,CACL,MAAMmC,GAAOgF,EAAAA,EAAAA,IAAW/F,EAAQvB,GAC5BsC,IACGT,EAAAA,EAAAA,IAAQ,YAAa,CAAE1B,KAAM,OAAQmC,QAE9C,CAKEgI,IAAarF,EAAAA,IAAmBuF,GAClC/E,EAAQiG,wBAAwB,CAAEjJ,OAAQzC,EAAIsK,YAChD,KAGFnB,EAAAA,EAAAA,IAAiB,gBAAgBtI,MAAOU,EAAQkE,EAAS8E,KACvD,MAAM,GACJvK,EAAE,SAAEsK,EAAQ,gBAAEqB,EAAe,MAAEvI,GAAQ2C,EAAAA,EAAAA,OACrCwE,EAEJ,GAAID,IAAarF,EAAAA,GAAgB,CAC/B,MAAM2G,GAAeC,EAAAA,EAAAA,IAAyBtK,EAAQvB,EAAIsK,GAC1D,GAAKsB,EA2BHnG,EAAQyD,SAAS,CACflJ,KACAsK,SAAUsB,EACVxI,QACAoH,2BAA2B,QA/BZ,CACjB,MAAM9E,GAAOoG,EAAAA,EAAAA,IAAuBvK,EAAQvB,EAAIsK,GAChD,IAAK5E,EACH,OAGFD,EAAQyD,SAAS,CACflJ,KAAIsK,WAAUlH,QAAOoH,2BAA2B,IAGlD,MAAM5I,QAAeC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE6D,OAAM4E,WAAUqB,oBAC1E,IAAK/J,EAEH,YADA6D,EAAQsG,iBAAiB,CAAE3I,UAG7B7B,GAASC,EAAAA,EAAAA,MACTD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,QAC7D4B,EAAAA,EAAAA,IAAUhE,GAEVkE,EAAQyD,SAAS,CACflJ,KACAsK,SAAU1I,EAAOgK,aACjBxI,QACA4I,mBAAmB,EACnBxB,2BAA2B,GAE/B,CAQF,MAGFrB,EAAAA,EAAAA,IAAiB,kBAAkBtI,MAAOU,EAAQkE,EAAS8E,KACzD,MAAM,GAAEvK,EAAE,MAAEoD,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACpC7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQvB,GAChC,IAAK0F,EACH,OAGF,MAAMuG,QAAqBpK,EAAAA,EAAAA,IAAQ,gBAAiB6D,GAEhDuG,GAAcjG,UAAUkG,cAC1BzG,EAAQyD,SAAS,CAAElJ,GAAIiM,EAAajG,SAASkG,aAAc9I,SAC7D,KAGF+F,EAAAA,EAAAA,IAAiB,0BAA0BtI,MAAOU,EAAQkE,EAAS8E,KACjE,MAAM,OACJ9H,EAAM,SAAE6H,EAAQ,UAAE6B,EAAS,MAAE/I,GAAQ2C,EAAAA,EAAAA,OACnCwE,EACE7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGF,MAAM9D,QAAeC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE6D,OAAM4E,aAC3D1I,IAGLL,GAASC,EAAAA,EAAAA,MACTD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,QAC7D4B,EAAAA,EAAAA,IAAUhE,GAEVkE,EAAQ2G,aAAa,CACnB3J,SAAQ6H,WAAU6B,YAAW/I,UAC7B,KAGJ+F,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,MAAEnH,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GAAW,CAAC,EAC5C7E,GAAO2G,EAAAA,EAAAA,IAAkB9K,GAC/B,GAAImE,EAEF,YADAD,EAAQyD,SAAS,CAAElJ,GAAI0F,EAAK1F,GAAIsM,sBAAsB,EAAMlJ,UAI9DqC,EAAQyD,SAAS,CAAElJ,GAAIuM,EAAAA,IAAaD,sBAAsB,EAAMlJ,UAEhE,MAAMxB,QAAeC,EAAAA,EAAAA,IAAQ,YAAa,CAAE1B,KAAM,YAC9CyB,GACF6D,EAAQyD,SAAS,CAAElJ,GAAI4B,EAAOa,OAAQ6J,sBAAsB,EAAMlJ,SACpE,KAGF+F,EAAAA,EAAAA,IAAiB,gBAAgBtI,MAAOU,EAAQkE,EAAS8E,KACvD,MAAMxJ,EAAWwJ,EAAQxJ,UACnB,UAAEyL,GAAcjC,EACtB,IAAI,cAAErJ,GAAkBqJ,EACpBlB,EAAI,EAER,MAAMoD,EAAgB/G,GACbA,EAAK9C,aAAa8J,MAAQhH,EAAKiH,SAGxC,KAAOzL,IAAkBK,EAAOoB,MAAM2C,cAAcvE,IAAW,CAC7D,GAAIsI,KAhNqB,IAsNvB,YALIuD,EAAAA,KAEFC,QAAQjE,MAAM,mDAQlB,GAA+B,0BAF/BrH,GAASC,EAAAA,EAAAA,OAEEsL,iBAAmE,4BAArBvL,EAAOwL,UAC9D,OAGF,MAAMC,GAAW9L,GAAiBK,EAAOoB,MAAMqK,QAAQjM,GACjDkM,EAAaD,EACfA,EAECvD,KAAKzJ,GAAOuB,EAAOoB,MAAMiB,KAAK5D,KAC9B4J,QAAQlE,GACPmE,QAAQnE,GAAQ+G,EAAa/G,KAC1BA,EAAK1F,KAAOC,EAAAA,OACXiN,EAAAA,EAAAA,IAAmB3L,EAAQmE,EAAK1F,MAGrCmN,MAAK,CAACC,EAAOC,IAAUZ,EAAaW,GAAUX,EAAaY,KAAS,QACrEhM,QAEEP,EACJC,EACAkM,GAAYjN,GACZiN,EAAaR,EAAaQ,QAAc5L,EACxCH,GACA,GAGEA,IACFsL,MACAtL,GAAgB,GAGlBK,GAASC,EAAAA,EAAAA,KACX,MAGF2H,EAAAA,EAAAA,IAAiB,gBAAgB,CAAC5H,EAAQkE,EAAS8E,KACjD,MAAM,OAAE9H,EAAM,MAAE6K,EAAK,MAAElK,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAC/C7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,IAID4H,EACF9H,EAAajE,EAAQkE,EAASC,EAAMtC,GAEpCzC,GAA4B,IAAM6E,EAAajE,EAAQkE,EAASC,EAAMtC,KACxE,KAGF+F,EAAAA,EAAAA,IAAiB,gBAAgB,KAC/B3I,GAA4B,KAC1BM,EAAU,UACVA,EAAU,WAAW,GACrB,KAGJqI,EAAAA,EAAAA,IAAiB,qBAAqB,CAAC5H,EAAQkE,EAAS8E,KACtD,MAAM,OAAE9H,GAAW8H,EACb7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,IAIA7D,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC6D,UACIjD,IAAWxC,EAAAA,KAAiC,CAC9CsN,kBAAkB7L,EAAAA,EAAAA,IAA8BH,IAASI,UAE3D,KAGJwH,EAAAA,EAAAA,IAAiB,wBAAwB,CAAC5H,EAAQkE,EAAS8E,KAA8B,IAAAiD,EACvF,MAAM,OAAE/K,EAAM,UAAEgL,EAAY,GAAMlD,EAC5B7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGF,MAAMgI,EAAyB,QAAlBF,EAAGjD,EAAQmD,eAAO,IAAAF,EAAAA,EAAIC,EAAY,EAE/ClM,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQkB,EAAQ,CAAEiL,aACtCnI,EAAAA,EAAAA,IAAUhE,IACLM,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE6D,OAAMgI,UAASD,aAAY,KAGpEtE,EAAAA,EAAAA,IAAiB,yBAAyB,CAAC5H,EAAQkE,EAAS8E,KAA8B,IAAAoD,EACxF,MAAM,OAAElL,EAAM,QAAEmL,EAAO,UAAEH,EAAY,GAAMlD,EACrC7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGF,MAAMgI,EAAyB,QAAlBC,EAAGpD,EAAQmD,eAAO,IAAAC,EAAAA,EAAIF,EAAY,EAE/ClM,GAASsM,EAAAA,EAAAA,IAAYtM,EAAQkB,EAAQmL,EAAS,CAAEF,aAChDnI,EAAAA,EAAAA,IAAUhE,IACLM,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC6D,OAAMkI,UAASF,UAASD,aACxB,KAGJtE,EAAAA,EAAAA,IAAiB,iBAAiBtI,MAAOU,EAAQkE,EAAS8E,KACxD,MAAM,MACJuD,EAAK,MAAEC,EAAK,MAAEC,EAAK,UAAEC,EAAS,MAAE7K,GAAQ2C,EAAAA,EAAAA,OACtCwE,EAEE5G,EAASsK,EACZxE,KAAKzJ,IAAOsH,EAAAA,EAAAA,IAAW/F,EAAQvB,KAC/B4J,OAAOC,SASV,IAAIqE,EAPJ3M,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B6M,aAAc,CACZC,SAAUC,EAAAA,GAAqBC,aAEhCnL,IACHmC,EAAAA,EAAAA,IAAUhE,GAIV,IACE2M,QAAuBrM,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEiM,QAAOC,QAAOpK,SAClE,CAAE,MAAOiF,GACPrH,GAASC,EAAAA,EAAAA,MAETD,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B6M,aAAc,CACZC,SAAUC,EAAAA,GAAqBE,QAEhCpL,IAEHmC,EAAAA,EAAAA,IAAUhE,GAE0B,sBAA/BqH,EAAmBjH,QACtB8D,EAAQoD,sBAAsB,CAAE/G,MAAO,WAAYsB,UAEnDqC,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5F,SAE9E,CAEA,IAAK8K,EACH,OAGF,MAAQlO,GAAIyO,EAAS,WAAEvO,GAAegO,EAEtC3M,GAASC,EAAAA,EAAAA,MACTD,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQkN,EAAWP,GACvC3M,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B6M,aAAc,KACTM,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOgL,aACjCC,SAAUH,EAAiBI,EAAAA,GAAqBK,SAAWL,EAAAA,GAAqBE,QAEjFpL,IACHmC,EAAAA,EAAAA,IAAUhE,GACVkE,EAAQyD,SAAS,CAAElJ,GAAIyO,EAAWnC,sBAAsB,EAAMlJ,UAE1DqL,GAAavO,GAAc8N,SACvBnM,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEY,OAAQgM,EAAWvO,aAAY8N,SAClE,KAGF7E,EAAAA,EAAAA,IAAiB,eAAetI,MAAOU,EAAQkE,EAAS8E,KACtD,MAAM,OAAE9H,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACxC7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGF,MAAQ1F,GAAIyO,EAAS,WAAEvO,GAAewF,EAEtC,GAAM+I,GAAavO,EAInB,UACQ2B,EAAAA,EAAAA,IAAQ,cAAe,CAAE4M,YAAWvO,cAC5C,CAAE,MAAO0I,GAC6B,sBAA/BA,EAAmBjH,QACtB8D,EAAQoD,sBAAsB,CAAE/G,MAAO,WAAYsB,UAEnDqC,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5F,SAE9E,MAGF+F,EAAAA,EAAAA,IAAiB,kBAAkB,CAAC5H,EAAQkE,EAAS8E,KACnD,MAAM,OAAE9H,EAAM,OAAEmM,EAAM,MAAExL,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAChD7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC1BH,GAAOgF,EAAAA,EAAAA,IAAW/F,EAAQqN,GAC3BlJ,GAASpD,IAIdf,GAASsN,EAAAA,EAAAA,IAAUtN,EAAQkB,IAC3B8C,EAAAA,EAAAA,IAAUhE,IAENoI,EAAAA,EAAAA,IAAyBpI,EAAQ6B,IAAQX,SAAWA,GACtDgD,EAAQyD,SAAS,CAAElJ,QAAIqB,EAAW+B,WAG/BvB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE6D,OAAMpD,SAAO,KAGhD6G,EAAAA,EAAAA,IAAiB,cAAc,CAAC5H,EAAQkE,EAAS8E,KAC/C,MAAM,OAAE9H,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACxC7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,IAILnE,GAASsN,EAAAA,EAAAA,IAAUtN,EAAQkB,IAC3B8C,EAAAA,EAAAA,IAAUhE,IAENoI,EAAAA,EAAAA,IAAyBpI,EAAQ6B,IAAQX,SAAWA,GACtDgD,EAAQyD,SAAS,CAAElJ,QAAIqB,EAAW+B,WAG/BvB,EAAAA,EAAAA,IAAQ,aAAc,CAAEY,OAAQiD,EAAK1F,KAAK,KAGjDmJ,EAAAA,EAAAA,IAAiB,gBAAgB,CAAC5H,EAAQkE,EAAS8E,KACjD,MAAM,OAAE9H,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACxC7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGFnE,GAASsN,EAAAA,EAAAA,IAAUtN,EAAQkB,IAC3B8C,EAAAA,EAAAA,IAAUhE,IAENoI,EAAAA,EAAAA,IAAyBpI,EAAQ6B,IAAQX,SAAWA,GACtDgD,EAAQyD,SAAS,CAAElJ,QAAIqB,EAAW+B,UAGpC,MAAQpD,GAAIyO,EAAS,WAAEvO,GAAewF,EAClC+I,GAAavO,IACV2B,EAAAA,EAAAA,IAAQ,eAAgB,CAAE4M,YAAWvO,cAC5C,KAGFiJ,EAAAA,EAAAA,IAAiB,iBAAiB,CAAC5H,EAAQkE,EAAS8E,KAClD,MAAM,OAAE9H,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACxC7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGFnE,GAASsN,EAAAA,EAAAA,IAAUtN,EAAQkB,IAC3B8C,EAAAA,EAAAA,IAAUhE,IAENoI,EAAAA,EAAAA,IAAyBpI,EAAQ6B,IAAQX,SAAWA,GACtDgD,EAAQyD,SAAS,CAAElJ,QAAIqB,EAAW+B,UAGpC,MAAQpD,GAAIyO,EAAS,WAAEvO,GAAewF,EAClC+I,GAAavO,IACV2B,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE4M,YAAWvO,cAC7C,KAGFiJ,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,MACJuD,EAAK,UAAEG,EAAS,MAAED,EAAK,MAAE5K,GAAQ2C,EAAAA,EAAAA,OAC/BwE,EACE5G,EAASsK,EACZxE,KAAKzJ,IAAOsH,EAAAA,EAAAA,IAAW/F,EAAQvB,KAC/B4J,OAAOC,SAEVtI,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B6M,aAAc,CACZC,SAAUC,EAAAA,GAAqBC,aAEhCnL,IACHmC,EAAAA,EAAAA,IAAUhE,GAEV,IACE,MAAMuN,QAAoBjN,EAAAA,EAAAA,IAAQ,kBAAmB,CACnDiM,QACAnK,UAGF,IAAKmL,EACH,OAGF,MAAQ9O,GAAIyC,GAAWqM,EAEvBvN,GAASC,EAAAA,EAAAA,MACTD,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQkB,EAAQqM,GACpCvN,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B6M,aAAc,KACTM,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOgL,aACjCC,SAAUS,EAAcR,EAAAA,GAAqBK,SAAWL,EAAAA,GAAqBE,QAE9EpL,IACHmC,EAAAA,EAAAA,IAAUhE,GACVkE,EAAQyD,SAAS,CACflJ,GAAIyC,EACJ6J,sBAAsB,EACtBlJ,UAGEX,GAAUuL,SACNnM,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BY,SACAuL,SAGN,CAAE,MAAOe,GACW,kBAAdA,EAAEpN,UACJJ,GAASC,EAAAA,EAAAA,MACTD,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B6M,aAAc,KACTM,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOgL,aACjCC,SAAUC,EAAAA,GAAqBE,MAC/B5F,MAAO,qBAERxF,IACHmC,EAAAA,EAAAA,IAAUhE,GAEd,MAGF4H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAC5H,EAAQkE,EAAS8E,KACrD,MAAM,GAAEvK,EAAE,SAAEgP,EAAQ,MAAE5L,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAC9C7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQvB,GAChC,IAAK0F,EACH,OAGF,MAAM5D,GAAQmN,EAAAA,EAAAA,GAAmB1N,EAAQ,sBAEzC,GAAIyN,EAAU,CACZ,MAAME,GAASC,EAAAA,EAAAA,IAAiB5N,EAAQyN,GACxC,GAAIE,EAAQ,CACV,MAAME,IAAkBlC,EAAAA,EAAAA,IAAmB3L,EAAQvB,EAAIgP,IAEjD,cAAEK,EAAa,gBAAEC,GAAoBJ,EACrCK,EAAeH,EACjB,CAACpP,KAAQqP,GAAiB,KACzBA,GAAiB,IAAIzF,QAAQ4F,GAAaA,IAAaxP,IAGtDyP,EAAqB,CAACzP,KAAOsP,IAE9BzN,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7B7B,GAAIgP,EACJU,aAAc,IACTR,EACHG,cAAeE,EACfD,gBAAiBG,IAGvB,CACF,KAAO,CACL,MAAM1O,GAAW4O,EAAAA,EAAAA,IAAmBpO,EAAQvB,GACtC4P,GAAW1C,EAAAA,EAAAA,IAAmB3L,EAAQvB,EAAiB,aAAbe,EAA0B8O,EAAAA,SAAqBxO,GAEzFyO,EAAMvO,EAAOoB,MAAMoN,iBAA8B,aAAbhP,EAA0B,WAAa,UACjF,IAAK+O,GAAK1O,QAAU,IAAMU,IAAU8N,EAKlC,YAJAnK,EAAQoD,sBAAsB,CAC5B/G,MAAO,qBACPsB,WAICvB,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE6D,OAAM0J,gBAAiBQ,GAC5D,MAGFzG,EAAAA,EAAAA,IAAiB,sBAAsB,CAAC5H,EAAQkE,EAAS8E,KACvD,MAAM,GAAEvK,GAAOuK,EACT7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQvB,GAC5B0F,IACG7D,EAAAA,EAAAA,IAAQ,qBAAsB,CACjC6D,OACAsJ,UAAUgB,EAAAA,EAAAA,IAAetK,GAAQ,EAAImK,EAAAA,KAEzC,KAGF1G,EAAAA,EAAAA,IAAiB,mBAAmBtI,UAClC,MAAMoP,QAAoBpO,EAAAA,EAAAA,IAAQ,oBAE9BoO,IACF1O,GAASC,EAAAA,EAAAA,MAETD,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,eACPA,KAGP1K,EAAAA,EAAAA,IAAUhE,GACZ,KAGF4H,EAAAA,EAAAA,IAAiB,8BAA8BtI,UAC7C,MAAMqP,QAA+BrO,EAAAA,EAAAA,IAAQ,+BAEzCqO,IACF3O,GAASC,EAAAA,EAAAA,MAETD,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,YACVE,YAAaD,KAGjB3K,EAAAA,EAAAA,IAAUhE,GACZ,KAGF4H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAC5H,EAAQkE,EAAS8E,KACpD,MAAM,OACJ9H,EAAM,YAAE2N,EAAW,SAAEC,EAAQ,MAAEjN,GAAQ2C,EAAAA,EAAAA,OACrCwE,EACEzI,GAAQmN,EAAAA,EAAAA,GAAmB1N,EAAQ,sBAElB8O,EACpBC,MAAMtQ,IAAOmP,EAAAA,EAAAA,IAAiB5N,EAAQvB,GAAKsP,gBAAgBlO,QAAUU,IAEtE2D,EAAQoD,sBAAsB,CAAE/G,MAAO,qBAAsBsB,WAI/DgN,EAAYvL,SAAQhE,UAClB,MAAMqO,GAASC,EAAAA,EAAAA,IAAiB5N,EAAQvB,GACpCkP,SACIrN,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B7B,KACA0P,aAAc,IACTR,EACHG,cAAeH,EAAOG,eAAezF,QAAQ4F,GAAaA,IAAa/M,IACvE6M,gBAAiBJ,EAAOI,gBAAgB1F,QAAQ2G,GAAeA,IAAe9N,MAGpF,IAGF4N,EAASxL,SAAQhE,UACf,MAAMqO,GAASC,EAAAA,EAAAA,IAAiB5N,EAAQvB,GACpCkP,SACIrN,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B7B,KACA0P,aAAc,IACTR,EACHI,gBAAiBJ,EAAOI,gBAAgBtL,OAAOvB,KAGrD,IACA,KAGJ0G,EAAAA,EAAAA,IAAiB,kBAAkB,CAAC5H,EAAQkE,EAAS8E,KACnD,MAAM,GAAEvK,EAAE,aAAE0P,GAAiBnF,EACvB2E,GAASC,EAAAA,EAAAA,IAAiB5N,EAAQvB,GAEpCkP,IACGrN,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7B7B,KACA0P,aAAc,CACZ1P,KACAwQ,SAAUtB,EAAOsB,SACjBnB,cAAeH,EAAOG,iBACnBK,IAGT,KAGFvG,EAAAA,EAAAA,IAAiB,iBAAiBtI,MAAOU,EAAQkE,EAAS8E,KACxD,MAAM,OAAE2E,EAAM,MAAE9L,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GACxC,WAAEkG,EAAU,KAAE7M,GAASrC,EAAO0O,YAE9BnO,GAAQmN,EAAAA,EAAAA,GAAmB1N,EAAQ,iBACzC,GAAIuB,OAAO6B,KAAKf,GAAMxC,QAAUU,EAK9B,YAJA2D,EAAQoD,sBAAsB,CAC5B/G,MAAO,gBACPsB,UAKJ,MAAMsN,EAAQC,KAAKC,OAAQH,GAAc,GAAKZ,EAAAA,MAGtC7P,GAAI6Q,EAAa,YAAEC,KAAgBC,GAAc7B,EAEnD8B,EAAQN,EAAQ,EAChBhB,EAAe,CACnB1P,GAAIgR,KACDD,GAsBL,SApBMlP,EAAAA,EAAAA,IAAQ,iBAAkB,CAC9B7B,GAAIgR,EACJtB,iBAIFjK,EAAQwL,UAAU,CAChB,QAAS,mBACTjR,GAAIgR,EACJ9B,OAAQQ,IAGVjK,EAAQyL,0BAA0B,CAChCC,cAAe,CACbhR,KAAM,cACNoK,QAASmG,EAAQ,GAEnBtN,WAGG0N,EACH,OAGFvP,GAASC,EAAAA,EAAAA,MACT,MAAM,YAAE2O,GAAgB5O,EAAO0O,YAE3BE,IACF5O,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,YACVE,YAAaA,EAAYvG,QAAOwH,IAAA,IAAC,GAAEpR,GAAIoR,EAAA,OAAKpR,IAAO6Q,CAAa,OAGpEtL,EAAAA,EAAAA,IAAUhE,GACZ,KAGF4H,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,UAAE8G,GAAc9G,QAED1I,EAAAA,EAAAA,IAAQ,kBAAmBwP,KAE9C9P,GAASC,EAAAA,EAAAA,MACTD,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,YACVQ,WAAYY,KAGhB9L,EAAAA,EAAAA,IAAUhE,GACZ,KAGF4H,EAAAA,EAAAA,IAAiB,oBAAoBtI,MAAOU,EAAQkE,EAAS8E,KAC3D,MAAM,GAAEvK,GAAOuK,GACA4E,EAAAA,EAAAA,IAAiB5N,EAAQvB,UAGhC6B,EAAAA,EAAAA,IAAQ,mBAAoB7B,EACpC,KAGFmJ,EAAAA,EAAAA,IAAiB,oBAAoB,CAAC5H,EAAQkE,EAAS8E,KACrD,MAAM,GAAEvK,GAAOuK,EACT7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQvB,GAC5B0F,IACEA,EAAK4L,aACFzP,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE6D,OAAM4E,SAAUrF,EAAAA,MAEjDpD,EAAAA,EAAAA,IAAQ,qBAAsB,CACjC6D,OACA4F,eAAgB5F,EAAK4F,gBAG3B,KAGFnC,EAAAA,EAAAA,IAAiB,iBAAiB,CAAC5H,EAAQkE,EAAS8E,KAClD,MAAM,OAAE9H,EAAM,QAAEmL,GAAYrD,EACtB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EAAM,OAEX,MAAM6L,EAAqB7L,EAAK8L,SAAS5D,IAAU6D,cAC9CF,KAEA1P,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC6D,OACA4E,SAAUsD,EACV8C,MAAOa,IAGThQ,GAASC,EAAAA,EAAAA,MACTD,GAASsM,EAAAA,EAAAA,IAAYtM,EAAQkB,EAAQmL,EAAS,CAC5C0D,YAAa,IAEf/P,GAASmQ,EAAAA,EAAAA,IAAiBnQ,EAAQkB,EAAQmL,EAAS,CACjD+D,uBAAwBJ,KAE1BhM,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,oBAAoBtI,MAAOU,EAAQkE,EAAS8E,KAC3D,MAAM,KAAEqH,EAAI,MAAExO,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAEtC3I,QAAeC,EAAAA,EAAAA,IAAQ,mBAAoB+P,GAC5ChQ,GAIL6D,EAAQyD,SAAS,CAAElJ,GAAI4B,EAAOa,OAAQW,SAAQ,KAGhD+F,EAAAA,EAAAA,IAAiB,yBAAyBtI,MAAOU,EAAQkE,EAAS8E,KAChE,MAAM,YACJlK,EAAW,YAAEwH,EAAW,OAAED,EAAM,MAAExE,GAAQ2C,EAAAA,EAAAA,OACxCwE,EAGJ9E,EAAQyD,SAAS,CAAElJ,GAAIuM,EAAAA,IAAanJ,UAEpC,MAAMsC,QA+9CD7E,eAA6DU,EAAWlB,GAC7EkB,GAASC,EAAAA,EAAAA,MACT,MAAMqQ,GAAYC,EAAAA,EAAAA,IAAwBvQ,EAAQlB,GAClD,GAAIwR,IAAcA,EAAUzR,MAC1B,OAAOoC,EAAAA,EAAAA,IAAWjB,EAAQsQ,EAAU7R,IAGtC,MAAM,KAAE0F,EAAI,KAAEpD,SAAeT,EAAAA,EAAAA,IAAQ,uBAAwBxB,IAAgB,CAAC,EAC9E,OAAKqF,GAILnE,GAASC,EAAAA,EAAAA,MACTD,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQmE,EAAK1F,GAAI0F,IACrCH,EAAAA,EAAAA,IAAUhE,GAENe,IACFf,GAAS0F,EAAAA,EAAAA,IAAW1F,EAAQe,EAAKtC,GAAIsC,IACrCiD,EAAAA,EAAAA,IAAUhE,IAGLmE,QAbP,CAcF,CAr/CqBqM,CAAuBxQ,EAAQlB,GAClD,IAAKqF,EAMH,OALAD,EAAQsG,iBAAiB,CAAE3I,eAC3BqC,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,mCAAmCsK,QAAQ,UAAW3R,GACtF+C,UAKJqC,EAAQyD,SAAS,CAAElJ,GAAI0F,EAAK1F,GAAIoD,UAE5BwE,GAEFD,EADApG,GAASC,EAAAA,EAAAA,MACsBiE,EAASC,EAAK1F,GAAI4H,EAAQC,EAAazE,EACxE,KAGF+F,EAAAA,EAAAA,IAAiB,oBAAoB,CAAC5H,EAAQkE,EAAS8E,KACrD,MAAM,IACJ0H,EAAG,MACH7O,GAAQ2C,EAAAA,EAAAA,OACNwE,GAEE,sBACJ2H,EAAqB,iBACrBC,EAAgB,eAChBC,EAAc,kBACdC,EAAiB,oBACjBC,EAAmB,iBACnB7K,EAAgB,aAChB2E,EAAY,YACZmG,EAAW,2BACXC,EAA0B,oBAC1BC,EACAC,mBAAoBC,GAClBlN,EAEJ,GAAIwM,EAAIW,MAAMC,EAAAA,KAEZ,YADAC,EAAAA,EAAAA,IAAgBb,GAIlB,MAAMc,EAAM,IAAIC,IAAIf,EAAIgB,cAAcC,WAAW,QAAUjB,EAAO,WAAUA,KAC5E,GAAIkB,EAAAA,IAAgBhJ,IAAI4I,EAAIK,WAA8B,MAAjBL,EAAIM,SAE3C,YADAC,OAAOC,KAAKR,EAAIS,WAAY,SAAU,YAIxC,MACMC,GADWN,EAAAA,IAAgBhJ,IAAI4I,EAAIK,UAAY,OAASL,EAAIK,UACvCM,MAAM,KACjC,GAAID,EAAUrS,OAAS,EAAG,OAC1B,MAAMiS,EAAgC,IAArBI,EAAUrS,OAAgB,GAAEqS,EAAU,MAAMV,EAAIM,WAAaN,EAAIM,UAC3EM,EAAOC,EAAOC,GAASR,EAASK,MAAM,KAAK9J,OAAOC,SAASJ,KAAKqK,GAASC,UAAUD,KACpFE,EAASlR,OAAOmR,YAAYlB,EAAImB,cAEtC,IAAItC,EACU,aAAV+B,IACF/B,EAAOgC,GAGT,MAAM/L,KAAcmM,EAAOG,eAAe,gBAAmBH,EAAOI,cAAqBJ,EAAOI,YAC1FC,GAASC,EAAAA,EAAAA,IAAqBN,EAAOK,QAE3C,GAAIV,EAAMf,MAAM,qBAOd,YANAV,EAAsB,CACpB7R,YAAasT,EAAMY,OAAO,EAAGZ,EAAMvS,OAAS,GAC5CyG,cACAD,OAAQoM,EAAOpM,OACfxE,UASJ,IAJIuQ,EAAMT,WAAW,MAAQS,EAAMT,WAAW,QAC5CtB,EAAO+B,EAAMY,OAAO,EAAGZ,EAAMvS,OAAS,IAGpCwQ,EAEF,YADAO,EAAiB,CAAEP,OAAMxO,UAI3B,GAAc,gBAAVuQ,GAAqC,aAAVA,EAO7B,YANAvB,EAAe,CACbxL,eAAgB,CACd4N,UAAWZ,GAEbxQ,UAKJ,GAAc,UAAVuQ,EAGF,YADAtB,EAAkB,CAAEoC,MADPC,EAAAA,EAAAA,IAAgBV,EAAO/B,IAAK+B,EAAOS,MACtBrR,UAI5B,GAAc,YAAVuQ,EAGF,YADAlB,EAAoB,CAAEkC,KADTf,EACexQ,UAI9B,MAAMwR,EAAsBhB,QAASvS,EAC/B8K,EAAY0H,EAAQgB,OAAOhB,QAASxS,EACpCyT,EAAYd,EAAOe,QAAUF,OAAOb,EAAOe,cAAW1T,EAE5D,GAAI2S,EAAOG,eAAe,cAAgBH,EAAOG,eAAe,cAC9D7B,EAAoB,CAClBxL,SAAU6M,EACVqB,WAAYhB,EAAOiB,WAAajB,EAAOkB,WACvC9R,eAEG,GAAc,MAAVuQ,GAAiBiB,GAAuBzI,EAAW,CAC5D,MAAM1J,EAAU,IAAGmS,IAEnB,KADapS,EAAAA,EAAAA,IAAWjB,EAAQkB,GAG9B,YADAgF,EAAiB,CAAE9F,QAAS,sBAAuByB,UAIrDgJ,EAAa,CACX3J,SACA0J,YACA/I,SAEJ,MAAWuQ,EAAMT,WAAW,KAC1BX,EAAY,CACVoC,KAAMhB,EAAMwB,UAAU,GACtB/R,UAEiB,YAAVuQ,EACTpB,EAAY,CACVoC,KAAMf,EACNxQ,UAEOyE,GAAewM,EACxB7B,EAA2B,CACzB1L,SAAU6M,EACV/J,OAAQyK,KACmB,iBAAhBxM,GAA4B,CAAEK,WAAYL,GACrDzE,UAGFuP,EAAyB,CACvB7L,SAAU6M,EACVxH,UAAWA,GAAa0I,OAAOD,GAC/BtK,SAAU6B,EAAY0I,OAAOD,QAAuBvT,EACpDyT,YACA5M,WAAY8L,EAAOoB,MACnBvN,cACAD,OAAQoM,EAAOpM,OACfyN,SAAUrB,EAAOsB,SACjBC,cAAe,CAAC5B,EAAOC,EAAOC,GAC9BzQ,SAEJ,KAGF+F,EAAAA,EAAAA,IAAiB,4BAA4BtI,MAAOU,EAAQkE,EAAS8E,KACnE,MAAM,KAAEqH,EAAI,MAAExO,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACtC3I,QAAeC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE+P,SAC9ChQ,GAIL6D,EAAQyD,SAAS,CAAElJ,GAAI4B,EAAO5B,GAAIoD,SAAQ,KAG5C+F,EAAAA,EAAAA,IAAiB,sBAAsBtI,MAAOU,EAAQkE,EAAS8E,KAC7D,MAAM,SACJzD,EAAQ,UAAEqF,EAAS,UAAE2I,EAAS,WAAE5M,EAAU,YAAEL,EAAW,OAAED,EAAM,SAAE0C,EAAQ,cAAEiL,EAAa,SAAEF,EAAQ,MAClGjS,GAAQ2C,EAAAA,EAAAA,OACNwE,EAEE7E,GAAOpC,EAAAA,EAAAA,IAAkB/B,EAAQ6B,GACjCoS,EAAaD,IAAgB,GAC7BE,EAAWD,IAAeX,OAAOW,GAEvC,IAAKV,EAAW,CACd,IAAKjN,GAAesE,IAAcjE,GAAcxC,GAAMgQ,WAAWpF,MAAMqF,GAAMA,EAAE7O,WAAaA,IAI1F,YAHArB,EAAQ2G,aAAa,CACnB3J,OAAQiD,EAAK1F,GAAIsK,WAAU6B,YAAW/I,UAI1C,IAAKqS,EAEH,kBA01CN5U,eACEU,EACAkE,EACAqB,EACAwD,EACAsL,EACA1N,EACAL,EACAD,GAEA,QAAAiO,EAAA1U,UAAAC,OAAA0U,EAAA,IAAAjQ,MAAAgQ,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAA5U,UAAA4U,GAAA,IADI3S,GAAQ2C,EAAAA,EAAAA,OAAkB+P,EAE9BvU,GAASC,EAAAA,EAAAA,MACT,MAAM6B,GAAcC,EAAAA,EAAAA,IAAkB/B,EAAQ6B,GAG9C,GAAIyE,IAAgBD,EAAQ,CAC1B,MAAMJ,QAAYN,EAAqB3F,EAAQkE,EAASqB,EAAU1D,GAElE,IAAKC,IAAgBmE,EAAK,OAS1B,YAPA/B,EAAQwC,cAAc,CACpBT,MACA/E,OAAQY,EAAYrD,MACO,iBAAhB6H,GAA4B,CAAEK,WAAYL,GACrDzE,SAIJ,CAEA,MAAM4S,EAAgB3S,GAAaqS,WAAWpF,MAAMqF,GAAMA,EAAE7O,WAAaA,IAEpEkP,GAEHvQ,EAAQyD,SAAS,CAAElJ,GAAIuM,EAAAA,IAAanJ,UAGtC,MAAMsC,QAAamB,EAAoBtF,EAAQuF,GAC1CpB,GASDkQ,EACFnQ,EAAQ2G,aAAa,CACnB3J,OAAQiD,EAAK1F,GAAIsK,WAAU6B,UAAWyJ,EAAexS,UAE7C4S,GACVvQ,EAAQyD,SAAS,CAAElJ,GAAI0F,EAAK1F,GAAIsK,WAAUlH,UAGxC8E,GACFzC,EAAQwQ,SAAS,CAAEC,MAAOxQ,EAAK1F,GAAImW,MAAOjO,IAGxCN,GAEFD,EADApG,GAASC,EAAAA,EAAAA,MACsBiE,EAASC,EAAK1F,GAAI4H,EAAQC,EAAazE,IAtBjE4S,IACHvQ,EAAQsG,iBAAiB,CAAE3I,UAC3BqC,EAAQgC,iBAAiB,CAAE9F,QAAS,sBAAuByB,UAsBjE,CA15CYsP,CAAmBnR,EAAQkE,EAASqB,EAAUwD,EAAU6B,EAAWjE,EAAYL,EAAaD,EAAQxE,EAG9G,CAEA,MAAM,OAAEX,EAAM,KAAEtC,IAASwJ,EAAAA,EAAAA,IAAyBpI,EAAQ6B,IAAU,CAAC,EAC/DgT,GAAepP,EAAAA,EAAAA,IAAqBzF,EAAQuF,GAClD,GAAIrE,GAAUqS,GAAa3I,GAAaiK,GAAyB,WAATjW,EAAmB,CACzE,MAAMkW,GAAaC,EAAAA,EAAAA,IAAiB/U,EAAQkB,EAAQ0J,GAEpD,GAAIkK,GAAcA,EAAW5T,SAAWA,EAOtC,YANAgD,EAAQ2G,aAAa,CACnB3J,OAAQ4T,EAAW5T,OACnB6H,SAAU+L,EAAW/L,SACrB6B,UAAW2I,EACX1R,SAIN,CAEKqS,GAAUhQ,EAAQyD,SAAS,CAAElJ,GAAIuM,EAAAA,IAAanJ,UAEnD,MAAMmT,QAAuB1P,EAAoBtF,EAAQuF,GAEzD,IAAKyP,EAAgB,OAIrB,GAFAhV,GAASC,EAAAA,EAAAA,MAELiU,GAAYc,EAAgB,CAC9B,MAAMC,GAAQC,EAAAA,EAAAA,MASd,YAPAhR,EAAQiR,kBAAkB,CACxBC,QAASnB,EACTU,MAAOK,EAAevW,GACtBoD,QACAiS,WACAmB,SAGJ,CAEA,IAAKrK,EAAW,OAEhB,MAAMkK,GAAaC,EAAAA,EAAAA,IAAiB/U,EAAQgV,EAAevW,GAAImM,GAC/D,IAAIyK,EAEJ,GAAKP,EAUHO,EAAmBP,EAAW5T,WAVf,CACf,MAAMb,QAAeC,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE6D,KAAM6Q,EAAgBjM,SAAU6B,IAC1F,IAAKvK,EAAQ,OAEbL,GAASC,EAAAA,EAAAA,MACTD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,QAC7D4B,EAAAA,EAAAA,IAAUhE,GAEVqV,EAAmBhV,EAAOgV,gBAC5B,CAIKA,GAELnR,EAAQ2G,aAAa,CACnB3J,OAAQmU,EACRtM,SAAU6B,EACVA,UAAW0I,OAAOC,GAClB1R,SACA,KAGJ+F,EAAAA,EAAAA,IAAiB,0BAA0BtI,MAAOU,EAAQkE,EAAS8E,KACjE,MAAM,OACJ9H,EAAM,UAAEoU,EAAS,MACjBzT,GAAQ2C,EAAAA,EAAAA,OACNwE,EAEE7E,QAAayC,EAAmB5G,EAAQkE,EAAShD,EAAQW,GAC1DsC,IAILnE,GAASC,EAAAA,EAAAA,MACTD,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQmE,EAAK1F,GAAI,CAAE+W,mBAAoBF,KACnEtR,EAAAA,EAAAA,IAAUhE,IAELM,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE6D,OAAMmR,cAAY,KAG7D1N,EAAAA,EAAAA,IAAiB,iCAAiC,CAAC5H,EAAQkE,EAAS8E,KAClE,MAAM,OAAE9H,EAAM,aAAEuU,GAAiBzM,EAC3B7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAE3BiD,IAIA7D,EAAAA,EAAAA,IAAQ,gCAAiC,CAAE6D,OAAMsR,gBAAe,KAGvE7N,EAAAA,EAAAA,IAAiB,gCAAgCtI,MAAOU,EAAQkE,EAAS8E,KACvE,MAAM,OACJ9H,EAAM,OAAEmM,EAAM,aAAEoI,EAAY,MAC5B5T,GAAQ2C,EAAAA,EAAAA,OACNwE,EAEEjI,GAAOgF,EAAAA,EAAAA,IAAW/F,EAAQqN,GAEhC,IAAKtM,EACH,OAGF,MAAMoD,QAAayC,EAAmB5G,EAAQkE,EAAShD,EAAQW,GAE/D,IAAKsC,EAAM,aAEL7D,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE6D,OAAMpD,OAAM0U,iBAE5DzV,GAASC,EAAAA,EAAAA,MAET,MAAMyV,GAAkBC,EAAAA,EAAAA,IAAmB3V,EAAQkB,GACnD,IAAKwU,EACH,OAGF,MAAM,QAAEE,EAAO,cAAEC,GAAkBH,EAE7BI,EAAWxN,QAAQmN,EAAaM,cAChCC,GAAezU,OAAO6B,KAAKqS,GAAc5V,OAE/CG,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQkB,EAAQ,IACtC0U,GAAWE,GAAY,CACzBF,QAASA,EAAQvN,QAAQ4N,GAAMA,EAAE5I,SAAWA,QAE1CuI,IAAYE,GAAY,CAC1BF,QAASA,EAAQ1N,KAAK+N,GACpBA,EAAE5I,SAAWA,EACT,IAAK4I,EAAGR,gBACRQ,QAGJD,GAAeH,GAAiB,CAClCA,cAAeA,EAAcxN,QAAQ4N,GAAMA,EAAE5I,SAAWA,QAG5DrJ,EAAAA,EAAAA,IAAUhE,EAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,OACJ9H,EAAM,OAAEmM,EAAM,YAAE6I,EAAW,YAAEC,EAAW,MACxCtU,GAAQ2C,EAAAA,EAAAA,OACNwE,EAEEjI,GAAOgF,EAAAA,EAAAA,IAAW/F,EAAQqN,GAChC,IAAKtM,EACH,OAGF,MAAMoD,QAAayC,EAAmB5G,EAAQkE,EAAShD,EAAQW,GAE/D,IAAKsC,EAAM,aAEL7D,EAAAA,EAAAA,IAAQ,kBAAmB,CAC/B6D,OAAMpD,OAAMmV,cAAaC,gBAG3B,MAAMC,QAAwB9V,EAAAA,EAAAA,IAAQ,gBAAiB6D,GACvD,IAAKiS,GAAiB3R,SACpB,OAGF,MAAM,iBAAE4R,GAAqBD,EAAgB3R,SACvC6R,GAAe/U,OAAO6B,KAAK8S,GAAarW,OAC9C,IAAI0W,EACJ,GAAIF,EACF,GAAIC,EAAa,CACf,MAAQ,CAACjJ,GAASmJ,KAAWC,GAASJ,EACtCE,EAAsBE,CACxB,MACEF,EAAsB,IACjBF,EACH,CAAChJ,GAAS,IACLgJ,EAAiBhJ,GACpB6I,cACAC,gBAMJI,IACFvW,GAASC,EAAAA,EAAAA,MACTD,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQkB,EAAQ,CAAEmV,iBAAkBE,KAChEvS,EAAAA,EAAAA,IAAUhE,GACZ,KAGF4H,EAAAA,EAAAA,IAAiB,cAActI,MAAOU,EAAQkE,EAAS8E,KACrD,MAAM,OACJ9H,EAAM,MAAEqL,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAE5K,GAAQ2C,EAAAA,EAAAA,OACnCwE,EAEE7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC1BuD,GAAWkR,EAAAA,EAAAA,IAAmB3V,EAAQkB,GACvCiD,IAILnE,GAASC,EAAAA,EAAAA,MACTD,GAAS0W,EAAAA,EAAAA,IAAyB1W,EAAQ2W,EAAAA,GAAmB3J,WAAYnL,IACzEmC,EAAAA,EAAAA,IAAUhE,SAEJ4W,QAAQC,IAAI,CAChB1S,EAAKoI,QAAUA,GACXjM,EAAAA,EAAAA,IAAQ,kBAAmB6D,EAAMoI,QACjCzM,EACJ2E,GAAU+H,QAAUA,GAChBlM,EAAAA,EAAAA,IAAQ,kBAAmB6D,EAAMqI,QACjC1M,EACJ2M,GACInM,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEY,SAAQvC,WAAYwF,EAAKxF,WAAY8N,eAChE3M,IAGNE,GAASC,EAAAA,EAAAA,MACTD,GAAS0W,EAAAA,EAAAA,IAAyB1W,EAAQ2W,EAAAA,GAAmBvJ,SAAUvL,IACvEmC,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,MAAEyD,EAAK,OAAEvL,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAC/C7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,IACLnE,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQkB,EAAQ,CAAE4V,gBAAYhX,IAClDE,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQkB,EAAQ,CAAE6V,kBAAcjX,KAC5DkE,EAAAA,EAAAA,IAAUhE,SAEJM,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BY,SACAvC,WAAYwF,EAAKxF,WACjB8N,gBAGInM,EAAAA,EAAAA,IAAQ,sBAAuB,CAACmM,IACtCvI,EAAQD,aAAa,CAAE/C,SAAQW,UAC/BqC,EAAQ8S,kBAAkB,CAAEC,UAAW/V,IAAS,KAGlD0G,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,MAAEyD,EAAK,OAAEvL,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAC/C7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EAAM,OACX,MAAM+S,EAAiB,CAACzK,GACxB,GAAItI,EAAK2S,aAAerK,EAAMhO,GAAI,CAEhC,MAAM0Y,EAAYhT,EAAKiT,SAAS,GAC5BD,GACFD,EAAe5U,KAAK6U,GAEtBnX,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQkB,EAAQ,CAAE4V,gBAAYhX,IAClDE,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQkB,EAAQ,CAAE6V,kBAAcjX,KAC5DkE,EAAAA,EAAAA,IAAUhE,SAEJM,EAAAA,EAAAA,IAAQ,gBAAiB,CAC7BY,SACAvC,WAAYwF,EAAKxF,WACjB8N,MAAO0K,GAEX,OAEqB7W,EAAAA,EAAAA,IAAQ,sBAAuB4W,KAEpDhT,EAAQD,aAAa,CAAE/C,SAAQW,UAC/BqC,EAAQ8S,kBAAkB,CAAEC,UAAW/V,IAAS,KAGlD0G,EAAAA,EAAAA,IAAiB,oBAAoB,CAAC5H,EAAQkE,EAAS8E,KACrD,MAAM,OAAE9H,EAAM,UAAEoU,GAActM,EACxB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAE3BiD,IAIA7D,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE6D,OAAMmR,aAAY,KAGvD1N,EAAAA,EAAAA,IAAiB,2BAA2BtI,UAC1C,MAAM+X,QAAe/W,EAAAA,EAAAA,IAAQ,4BAC7B,IAAK+W,EACH,OAGF,MAAMC,EAAYD,EAAO9N,QAAO,CAAClJ,EAAQkX,KACnCA,IAAUA,EAAMC,UAClBnX,EAAOkX,EAAM9Y,IAAM8Y,GAGdlX,IACN,CAAC,GAEJL,GAASC,EAAAA,EAAAA,MACTD,GAASyX,EAAAA,EAAAA,IAASzX,EAAQsX,GAC1BtX,EAAS,IACJA,EACHoB,MAAO,IACFpB,EAAOoB,MACVsW,iBAAkBnW,OAAO6B,KAAKkU,MAGlCtT,EAAAA,EAAAA,IAAUhE,EAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,uBAAuBtI,MAAOU,EAAQkE,EAAS8E,KAC9D,MAAM,UAAEkE,EAAS,OAAEhM,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GAAW,CAAC,EAE/D2O,GAAU1W,EAAAA,EAAAA,IAAWjB,EAAQkN,GACnC,IAAKyK,EACH,OAGF,MAAMxT,QAAayC,EAAmB5G,EAAQkE,EAAShD,EAAQW,GAE/D,IAAKsC,EAAM,OAEX,IAAIM,GAAWkR,EAAAA,EAAAA,IAAmB3V,EAAQmE,EAAK1F,IAC/C,IAAKgG,EAAU,CACb,MAAMmT,QAAiBtX,EAAAA,EAAAA,IAAQ,gBAAiB6D,GAChD,IAAKyT,EACH,OAGFnT,EAAWmT,EAASnT,QACtB,CAEIA,EAAU+Q,qBACZxV,GAASC,EAAAA,EAAAA,MACTD,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQmE,EAAK1F,GAAI,CAAE+W,oBAAoB,KACnExR,EAAAA,EAAAA,IAAUhE,SAEJM,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE6D,OAAMmR,WAAW,MAGxDhV,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEqX,UAASxT,QAAO,KAGvDyD,EAAAA,EAAAA,IAAiB,yBAAyBtI,MAAOU,EAAQkE,EAAS8E,KAChE,MAAM,UAAEkE,EAAS,MAAErL,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAE3C2O,GAAU1W,EAAAA,EAAAA,IAAWjB,EAAQkN,GACnC,IAAKyK,EACH,OAGF,MAAMlT,GAAWkR,EAAAA,EAAAA,IAAmB3V,EAAQkN,GAC5C,IAAI/I,EACAM,GAAUkG,eACZxG,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQyE,EAASkG,qBAG/BrK,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEqX,YAClCxT,GAEFF,EADAjE,GAASC,EAAAA,EAAAA,MACYiE,EAASC,EAAMtC,EACtC,KAGF+F,EAAAA,EAAAA,IAAiB,uBAAuB,CAAC5H,EAAQkE,EAAS8E,KACxD,MAAM,iBAAE6O,EAAgB,MAAEhW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAKxD,KAFkB6O,EAAmB,GAFlBnK,EAAAA,EAAAA,GAAmB1N,EAAQ,kBAY9C,OAAO4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC5B6X,oBACChW,GATDqC,EAAQoD,sBAAsB,CAC5B/G,MAAO,gBACPsB,SAOK,KAGX+F,EAAAA,EAAAA,IAAiB,0BAA0B,CAAC5H,EAAQkE,EAAS8E,KAC3D,MAAM,MAAEnH,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GAAW,CAAC,EAElD,OAAO4D,EAAAA,EAAAA,GAAe5M,EAAQ,CAC5B8X,oBAAgBhY,GACf+B,EAAM,KAGX+F,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,MAAEnH,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GAAW,CAAC,GAC5C,OAAE9H,IAAWkH,EAAAA,EAAAA,IAAyBpI,EAAQ6B,IAAU,CAAC,EACzDsC,EAAOjD,GAASD,EAAAA,EAAAA,IAAWjB,EAAQkB,QAAUpB,EACnD,IAAKqE,IAAQ6C,EAAAA,EAAAA,IAAiB7C,GAC5B,OAGF,MAAM4T,GAASpC,EAAAA,EAAAA,IAAmB3V,EAAQmE,EAAK1F,KAAKmX,SAAS/V,OAC7D,QAAeC,IAAXiY,QAA8CjY,IAAtBqE,EAAKQ,cAA8BoT,GAAU5T,EAAKQ,aAAc,OAE5F,MAAMtE,QAAeC,EAAAA,EAAAA,IAAQ,eAAgB6D,EAAK1F,GAAI0F,EAAKxF,WAAa,SAAUoZ,GAClF,IAAK1X,EACH,OAGF,MAAM,QAAEuV,EAAO,MAAExT,EAAK,iBAAEO,GAAqBtC,EACxCuV,GAAYA,EAAQ/V,SAIzBG,GAASC,EAAAA,EAAAA,MACTD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBJ,EAAO,OACtDpC,GAAS+C,EAAAA,EAAAA,IAAgB/C,EAAQ2C,GACjC3C,GAASgY,EAAAA,EAAAA,IAAehY,EAAQmE,EAAMyR,IACtC5R,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,kBAAkBtI,MAAOU,EAAQkE,EAAS8E,KACzD,MAAM,OAAE9H,EAAM,UAAEwL,EAAS,MAAE7K,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACnD7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC1BkB,EAASsK,EAAuBxE,KAAKmF,IAAWtH,EAAAA,EAAAA,IAAW/F,EAAQqN,KAAShF,OAAOC,SAEpFnE,GAAS/B,EAAMvC,SAIpBqE,EAAQ+T,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAuBC,QAASvW,gBACzFvB,EAAAA,EAAAA,IAAQ,iBAAkB6D,EAAM/B,GACtC8B,EAAQ+T,6BAA6B,CAAEC,uBAAwBC,EAAAA,GAAuBE,OAAQxW,UAE9FoC,EADAjE,GAASC,EAAAA,EAAAA,MACYiE,EAASC,EAAMtC,GAAM,KAG5C+F,EAAAA,EAAAA,IAAiB,oBAAoBtI,MAAOU,EAAQkE,EAAS8E,KAC3D,MAAM,OAAE9H,EAAM,OAAEmM,EAAM,MAAExL,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAChD7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC1BH,GAAOgF,EAAAA,EAAAA,IAAW/F,EAAQqN,GAE3BlJ,GAASpD,UAIRT,EAAAA,EAAAA,IAAQ,mBAAoB6D,EAAMpD,GAExCkD,EADAjE,GAASC,EAAAA,EAAAA,MACYiE,EAASC,EAAMtC,GAAM,KAG5C+F,EAAAA,EAAAA,IAAiB,qBAAqB,CAAC5H,EAAQkE,EAAS8E,KACtD,MAAM,OAAE9H,EAAM,YAAEoX,GAAgBtP,EAC1B7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAE3BiD,IAIA7D,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE6D,OAAMmU,eAAc,KAG1D1Q,EAAAA,EAAAA,IAAiB,2BAA2BtI,MAAOU,EAAQkE,EAAS8E,KAClE,MAAM,OAAE9H,EAAM,iBAAEqX,EAAgB,MAAE1W,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAC1D7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,UAEC7D,EAAAA,EAAAA,IAAQ,0BAA2B,CACvC6D,OACAoU,qBAIGtU,EADLjE,GAASC,EAAAA,EAAAA,MACiBiE,EAASC,EAAMtC,GAAM,KAGjD+F,EAAAA,EAAAA,IAAiB,oBAAoBtI,MAAOU,EAAQkE,EAAS8E,KAC3D,MAAM,OAAE9H,GAAW8H,EACb7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EAAM,OAEX,MAAM9D,QAAeC,EAAAA,EAAAA,IAAQ,oBAAqB6D,GAClD,IAAK9D,EAAQ,OACb,MAAM,SAAEmY,EAAQ,MAAEpW,GAAU/B,EAC5BL,GAASC,EAAAA,EAAAA,MAETD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBJ,EAAO,OAEtDpC,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQmE,EAAK1F,GAAI,CAAE+Z,cACvCxU,EAAAA,EAAAA,IAAUhE,EAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,oBAAoBtI,MAAOU,EAAQkE,EAAS8E,KAC3D,MAAM,OAAE9H,EAAM,UAAEoU,GAActM,EACxB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,KACAsU,EAAAA,EAAAA,IAAiBtU,KAAUuU,EAAAA,EAAAA,IAAcvU,WAExC7D,EAAAA,EAAAA,IAAQ,mBAAoB6D,EAAMmR,EAAU,KAGpD1N,EAAAA,EAAAA,IAAiB,qBAAqBtI,MAAOU,EAAQkE,EAAS8E,KAC5D,MAAM,OAAE9H,EAAM,UAAEoU,GAActM,EACxB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,KACAsU,EAAAA,EAAAA,IAAiBtU,KAAUuU,EAAAA,EAAAA,IAAcvU,WAExC7D,EAAAA,EAAAA,IAAQ,oBAAqB6D,EAAMmR,EAAU,KAGrD1N,EAAAA,EAAAA,IAAiB,kBAAkB,CAAC5H,EAAQkE,EAAS8E,KACnD,MAAM,OAAE9H,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAC9C,OAAO4D,EAAAA,EAAAA,GAAe5M,EAAQ,CAC5B2Y,iBAAkBzX,GACjBW,EAAM,KAGX+F,EAAAA,EAAAA,IAAiB,mBAAmB,CAAC5H,EAAQkE,EAAS8E,KACpD,MAAM,MAAEnH,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GAAW,CAAC,EAClD,OAAO4D,EAAAA,EAAAA,GAAe5M,EAAQ,CAC5B2Y,sBAAkB7Y,GACjB+B,EAAM,KAGX+F,EAAAA,EAAAA,IAAiB,8BAA8BtI,MAAOU,EAAQkE,EAAS8E,KACrE,MAAM,SACJzD,EAAQ,OAAE8C,EAAM,WAAE1B,EAAU,MAAE9E,GAAQ2C,EAAAA,EAAAA,OACpCwE,EACE/C,QAAYN,EAAqB3F,EAAQkE,EAASqB,EAAU1D,GAClE,IAAKoE,EAAK,OAEVjG,GAASC,EAAAA,EAAAA,MACT,MAAQ2Y,YAAY,KAAEC,IAAW7Y,EACjC,IAAK6Y,EAAK5S,EAAIxH,IAeZ,OAdAuB,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B8Y,0BAA2B,CACzB7S,MACA8S,UAAW,CACTC,OAAQ,yBACRhQ,QAAS,CACP/C,MACAoC,SACA1B,iBAIL9E,QACHmC,EAAAA,EAAAA,IAAUhE,GAIZkE,EAAQ+U,uBAAuB,CAC7BhT,MACAoC,SACA1B,aACA9E,SACA,KAGJ+F,EAAAA,EAAAA,IAAiB,cAActI,MAAOU,EAAQkE,EAAS8E,KACrD,MAAM,OAAE9H,EAAM,MAAE6K,GAAU/C,EACpB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EAAM,OAEX,IAAK4H,GAAS5H,EAAK+U,gBAAkB/U,EAAK+U,eAAerZ,SAAWsE,EAAKgV,YACvE,OAGF,MAAMC,GAAerN,GAAS5H,EAAK+U,eAAiB/U,EAAK+U,eAAe3P,QAAO,CAAC8P,EAAKC,KACnF,MAAMC,EAAQpV,EAAK8L,SAASqJ,GACtBE,EAAWrV,EAAK8L,SAASoJ,GAC/B,OAAKE,KACAC,GAAYD,EAAMrJ,cAAgBsJ,EAAStJ,eACvCoJ,EAFUD,CAIT,SACPvZ,GAEGrB,GAAIgb,EAAetO,KAAMzL,EAAYwQ,cAAezQ,GAAc2Z,GACrEjV,EAAK8L,SAASmJ,IAAiB,CAAC,EAC/B/Y,QAAeC,EAAAA,EAAAA,IAAQ,cAAe,CAC1C6D,OAAMsV,gBAAeha,WAAUC,aAAYa,MAAOkZ,EAAgBC,EAAAA,IAAeC,EAAAA,MAG9EtZ,IAELL,GAASC,EAAAA,EAAAA,MACTD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAASyX,EAAAA,EAAAA,IAASzX,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,OAC7DpB,GAAS4Z,EAAAA,EAAAA,IAAY5Z,EAAQK,EAAOwZ,UACpC7Z,GAAS8Z,EAAAA,EAAAA,IAAa9Z,EAAQkB,EAAQb,EAAO0Z,MAAO1Z,EAAO4P,QAC3DjQ,GAASga,EAAAA,EAAAA,IAAqBha,EAAQkB,EAAQb,EAAO4P,OAAO/H,KAAKqR,GAAUA,EAAM9a,MACjF8C,OAAO0Y,QAAQ5Z,EAAOgD,YAAc,CAAC,GAAGC,SAAQ4W,IAAuB,IAArBnR,EAAUxF,GAAM2W,EAChEla,GAAS6D,EAAAA,EAAAA,IAAmB7D,EAAQkB,EAAQoS,OAAOvK,GAAW,QAASxF,GAAO4W,eAC9Ena,GAAS6D,EAAAA,EAAAA,IAAmB7D,EAAQkB,EAAQoS,OAAOvK,GAAW,eAAgBxF,GAAO6W,aAAa,IAEpG7Y,OAAO0Y,QAAQ5Z,EAAOga,6BAA+B,CAAC,GAAG/W,SAAQgX,IAA0B,IAAxBjO,EAASzB,GAAU0P,EACpFta,GAASmQ,EAAAA,EAAAA,IAAiBnQ,EAAQkB,EAAQoS,OAAOjH,GAAU,CAAE+D,uBAAwBxF,GAAY,KAGnG5G,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,iBAAiBtI,MAAOU,EAAQkE,EAAS8E,KACxD,MAAM,OAAE9H,EAAM,QAAEmL,GAAYrD,EAEtB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EAAM,OAEX,MAAM9D,QAAeC,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE6D,OAAMkI,YAEvD,GAAKhM,EAQLL,GAASC,EAAAA,EAAAA,MACTD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAASyX,EAAAA,EAAAA,IAASzX,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,OAC7DpB,GAAS4Z,EAAAA,EAAAA,IAAY5Z,EAAQK,EAAOwZ,UACpC7Z,GAASsM,EAAAA,EAAAA,IAAYtM,EAAQkB,EAAQmL,EAAShM,EAAOkZ,QAErDvV,EAAAA,EAAAA,IAAUhE,QAbR,GAAI,UAAWgJ,GAAWA,EAAQuR,uBAAwB,CACxD,MAAM,MAAE1Y,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EACtC9E,EAAQyD,SAAS,CAAElJ,QAAIqB,EAAW+B,SACpC,CAUe,KAGnB+F,EAAAA,EAAAA,IAAiB,eAAetI,MAAOU,EAAQkE,EAAS8E,KACtD,MAAM,OAAE9H,EAAM,UAAEoU,EAAS,MAAEzT,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAEnD7E,QAAayC,EAAmB5G,EAAQkE,EAAShD,EAAQW,GAC/D,IAAKsC,EACH,OAGFnE,GAASC,EAAAA,EAAAA,MAET,MAAMua,EAAcrW,EAAKqT,QAIzB,IAAInX,EAHJL,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQkB,EAAQ,CAAEsW,QAASlC,KAC/CtR,EAAAA,EAAAA,IAAUhE,GAGV,IACEK,QAAeC,EAAAA,EAAAA,IAAQ,cAAe,CAAE6D,OAAMmR,aAChD,CAAE,MAAOjO,GACFA,EAAmBjH,QAAQuR,WAAW,aACzCzN,EAAQgC,iBAAiB,CAAE9F,QAAS+F,EAAAA,GAAuB,aAActE,UAEzEqC,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5F,SAE9E,CAEKxB,IACHL,GAASC,EAAAA,EAAAA,MACTD,GAASiF,EAAAA,EAAAA,IAAWjF,EAAQkB,EAAQ,CAAEsW,QAASgD,KAC/CxW,EAAAA,EAAAA,IAAUhE,GACZ,KAGF4H,EAAAA,EAAAA,IAAiB,4BAA4BtI,MAAOU,EAAQkE,EAAS8E,KACnE,MAAM,OAAE9H,EAAM,UAAEoU,GAActM,EACxB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGF,MAAMsW,GAAgB9E,EAAAA,EAAAA,IAAmB3V,EAAQmE,EAAK1F,KAAKic,sBAC3D1a,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQkB,EAAQ,CAAEwZ,sBAAuBpF,KACrEtR,EAAAA,EAAAA,IAAUhE,SAEWM,EAAAA,EAAAA,IAAQ,2BAA4B,CAAE6D,OAAMmR,oBAEhCxV,IAAlB2a,IACbza,GAASC,EAAAA,EAAAA,MACTD,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQkB,EAAQ,CAAEwZ,sBAAuBD,KACrEzW,EAAAA,EAAAA,IAAUhE,GACZ,KAGF4H,EAAAA,EAAAA,IAAiB,eAAetI,MAAOU,EAAQkE,EAAS8E,KACtD,MAAM,OACJ9H,EAAM,MAAEqL,EAAK,UAAEoO,EAAS,YAAEC,EAAW,MACrC/Y,GAAQ2C,EAAAA,EAAAA,OACNwE,EACE7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EAAM,QAEPgJ,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOgZ,mBAChC7a,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B6a,iBAAkB,CAChB3Z,SACA4Z,WAAW,IAEZjZ,IACHmC,EAAAA,EAAAA,IAAUhE,IAGZ,MAAMqM,QAAgB/L,EAAAA,EAAAA,IAAQ,cAAe,CAC3C6D,OAAMoI,QAAOoO,YAAWC,gBAEtBvO,GACFnI,EAAQyD,SAAS,CACflJ,GAAIyC,EAAQ6H,SAAUsD,EAAStB,sBAAsB,EAAMlJ,UAG/DqC,EAAQ6W,sBAAsB,CAAElZ,SAAQ,KAG1C+F,EAAAA,EAAAA,IAAiB,eAAetI,MAAOU,EAAQkE,EAAS8E,KACtD,MAAM,OAAE9H,EAAM,QAAEmL,GAAYrD,EACtB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,SAEgB7D,EAAAA,EAAAA,IAAQ,cAAe,CAAE6D,OAAMkI,cAIpDrM,GAASC,EAAAA,EAAAA,MACTD,GAASgb,EAAAA,EAAAA,IAAYhb,EAAQkB,EAAQmL,IACrCrI,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,aAAatI,MAAOU,EAAQkE,EAAS8E,KACpD,MAAM,OACJ9H,EAAM,QAAEmL,EAAO,MAAExK,GAAQ2C,EAAAA,EAAAA,SAAsBiS,GAC7CzN,EACE7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC1BqY,EAAQpV,GAAM8L,SAAS5D,GACxBlI,GAASoV,KAEVpM,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOoZ,iBAChCjb,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9Bib,eAAgB,CACd/Z,SACAmL,UACAyO,WAAW,IAEZjZ,IACHmC,EAAAA,EAAAA,IAAUhE,UAGSM,EAAAA,EAAAA,IAAQ,YAAa,CAAE6D,OAAMkI,aAAYoK,MAG9DzW,GAASC,EAAAA,EAAAA,MACTD,GAASsM,EAAAA,EAAAA,IAAYtM,EAAQkB,EAAQmL,EAASoK,IAC9CzS,EAAAA,EAAAA,IAAUhE,GAEVkE,EAAQgX,oBAAoB,CAAErZ,WAAQ,KAGxC+F,EAAAA,EAAAA,IAAiB,qBAAqB,CAAC5H,EAAQkE,EAAS8E,KACtD,MAAM,OACJ9H,EAAM,QAAEmL,EAAO,SAAEgC,EAAQ,MAAExM,GAAQ2C,EAAAA,EAAAA,OACjCwE,GAEE,kBAAEmS,GAAsBnb,EAAOob,WAAa,CAAC,EAC7CjX,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,GAASA,EAAK8L,QAAWkL,IAE1B9M,GAAY9M,OAAOC,OAAO2C,EAAK8L,QAAQ5H,QAAQkR,GAAUA,EAAMlL,WAAUxO,QAAUsb,EACrFjX,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,2BAA4BgV,EAAmB,KAC/EtZ,WAKCvB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE6D,OAAMkI,UAASgC,aAAW,KAGhEzG,EAAAA,EAAAA,IAAiB,uBAAuBtI,MAAOU,EAAQkE,EAAS8E,KAC9D,MAAM,KAAEoK,EAAI,MAAEvR,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAEtC3I,QAAeC,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE8S,SACjD/S,GAQLL,GAASC,EAAAA,EAAAA,MAETD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAASyX,EAAAA,EAAAA,IAASzX,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,OAE7DpB,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9Bqb,cAAe,CACbC,OAAQjb,EAAOib,SAEhBzZ,IAEHmC,EAAAA,EAAAA,IAAUhE,IAlBRkE,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,6BAChCtE,SAgBa,KAGnB+F,EAAAA,EAAAA,IAAiB,sBAAsBtI,MAAOU,EAAQkE,EAAS8E,KAC7D,MAAM,OAAEsS,EAAM,QAAEC,EAAO,MAAE1Z,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAEjDwS,EAAQD,EAAQrT,KAAKuT,IAAWxa,EAAAA,EAAAA,IAAWjB,EAAQyb,KAASpT,OAAOC,SACnEoT,EAAiBF,EAAMnT,QAAQsT,GAASA,EAAKC,cAAa/b,OAE1D8N,EAAS,aAAc2N,GAAS1N,EAAAA,EAAAA,IAAiB5N,EAAQsb,EAAO7N,eAAY3N,EAC5E+b,EAAc,UAAWP,EAASA,EAAO/O,MAAQoB,GAAQpB,MAE/D,IAEE,UADqBjM,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE8S,KAAMkI,EAAOlI,KAAMoI,UAC3D,OAEbtX,EAAQgC,iBAAiB,CACvBqG,MAAOpG,EAAAA,GAAuBwH,EAAS,yBAA2B,uBAAwBkO,GAC1Fzb,QAAS+F,EAAAA,GAAuB,0BAA2BuV,EAAgB,KAC3E7Z,SAEJ,CAAE,MAAOwF,GAC6B,uBAA/BA,EAAmBjH,QACtB8D,EAAQoD,sBAAsB,CAAE/G,MAAO,iBAAkBsB,UAEzDqC,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5F,SAE9E,MAGF+F,EAAAA,EAAAA,IAAiB,iBAAiBtI,MAAOU,EAAQkE,EAAS8E,KACxD,MAAM,SAAEyE,EAAQ,QAAE8N,EAAO,MAAE1Z,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAEnD2E,GAASC,EAAAA,EAAAA,IAAiB5N,EAAQyN,GAElC+N,EAAQD,GAASrT,KAAKuT,IAAWxa,EAAAA,EAAAA,IAAWjB,EAAQyb,KAASpT,OAAOC,UAAY,SAEjEhI,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEmN,WAAU+N,WAI1DtX,EAAQgC,iBAAiB,CACvBqG,MAAOpG,EAAAA,GAAuB,yBAA0BwH,EAAOpB,OAC/DnM,QAAS+F,EAAAA,GAAuB,4BAA6BqV,EAAM3b,OAAQ,KAC3EgC,SACA,KAGJ+F,EAAAA,EAAAA,IAAiB,uBAAuBtI,MAAOU,EAAQkE,EAAS8E,KAC9D,MAAM,SAAEyE,GAAazE,EAEf3I,QAAeC,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEmN,aAElDpN,IAELL,GAASC,EAAAA,EAAAA,MAETD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAASyX,EAAAA,EAAAA,IAASzX,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,OAC7DpB,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,YACVoN,QAAS,IACJ9b,EAAO0O,YAAYoN,QACtB,CAACrO,GAAWpN,EAAOyb,YAIzB9X,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,wBAAwBtI,MAAOU,EAAQkE,EAAS8E,KAC/D,MAAM,SAAEyE,EAAQ,MAAE5L,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAE1C2E,GAASC,EAAAA,EAAAA,IAAiB5N,EAAQyN,GACxC,IAAKE,EAAQ,OAUb,IAAItN,EARJL,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B+b,kBAAmB,KACd5O,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOka,kBACjCjB,WAAW,IAEZjZ,IACHmC,EAAAA,EAAAA,IAAUhE,GAIV,IACEK,QAAeC,EAAAA,EAAAA,IAAQ,sBAAuB,CAC5CmN,WACA+N,MAAO7N,EAAOI,gBAAgBtL,OAAOkL,EAAOG,eAAiB,IAC1D5F,KAAKhH,IAAWD,EAAAA,EAAAA,IAAWjB,EAAQkB,KAAW6E,EAAAA,EAAAA,IAAW/F,EAAQkB,KAASmH,OAAOC,UAExF,CAAE,MAAOjB,GACHtI,EAA0B6J,IAAKvB,EAAmBjH,UACpD8D,EAAQoD,sBAAsB,CAAE/G,MAAO,kBAAmBsB,UAC1DqC,EAAQyL,0BAA0B,CAAEqM,OAAQC,EAAAA,GAAgBC,QAASra,WAErEqC,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5F,SAE9E,CAEA,IAAKxB,IAAWA,EAAOib,OAAQ,OAE/B,MAAM,kBAAES,IAAsB5O,EAAAA,EAAAA,IAAenN,EAAQ6B,GAEhDka,IAEL/b,GAASC,EAAAA,EAAAA,MACTD,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,YACVrM,KAAM,IACDrC,EAAO0O,YAAYrM,KACtB,CAACoL,GAAW,IACPzN,EAAO0O,YAAYrM,KAAKoL,MACxBpN,EAAOgI,SAGdyT,QAAS,IACJ9b,EAAO0O,YAAYoN,QACtB,CAACrO,GAAW,IACNzN,EAAO0O,YAAYoN,QAAQrO,IAAa,GAC5CpN,EAAOib,WAKftb,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B+b,kBAAmB,IACdA,EACHrL,IAAKrQ,EAAOib,OAAO5K,IACnBoK,WAAW,IAEZjZ,IACHmC,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,sBAAsBtI,MAAOU,EAAQkE,EAAS8E,KAC7D,MAAM,SACJyE,EAAQ,QAAE8N,EAAO,IAAE7K,EAAG,MAAE7O,GAAQ2C,EAAAA,EAAAA,OAC9BwE,EAEEoK,EAAO1C,EAAIyB,MAAM,KAAKgK,MAC5B,IAAK/I,EAAM,OAEX,MAAMoI,EAAQD,EACXrT,KAAKhH,IAAWD,EAAAA,EAAAA,IAAWjB,EAAQkB,KAAW6E,EAAAA,EAAAA,IAAW/F,EAAQkB,KAASmH,OAAOC,SAEpFtI,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B+b,kBAAmB,KACd5O,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOka,kBACjCjB,WAAW,IAEZjZ,IACHmC,EAAAA,EAAAA,IAAUhE,GAEV,IACE,MAAMK,QAAeC,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEmN,WAAU2F,OAAMoI,UAErE,IAAKnb,EACH,OAGFL,GAASC,EAAAA,EAAAA,MACTD,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,YACVoN,QAAS,IACJ9b,EAAO0O,YAAYoN,QACtB,CAACrO,GAAWzN,EAAO0O,YAAYoN,QAAQrO,IAAWvF,KAAKoT,GACjDA,EAAO5K,MAAQA,EACVrQ,EAEFib,QAKftX,EAAAA,EAAAA,IAAUhE,EACZ,CAAE,MAAOqH,GACPnD,EAAQqD,WAAW,CAAEC,KAAM,IAAMH,EAAoBI,aAAa,GAAQ5F,SAC5E,CAAE,QACA7B,GAASC,EAAAA,EAAAA,MAETD,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B+b,kBAAmB,KACd5O,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAOka,kBACjCjB,WAAW,IAEZjZ,IACHmC,EAAAA,EAAAA,IAAUhE,EACZ,MAGF4H,EAAAA,EAAAA,IAAiB,wBAAwBtI,MAAOU,EAAQkE,EAAS8E,KAC/D,MAAM,SAAEyE,EAAQ,IAAEiD,GAAQ1H,EAEpBoK,EAAO1C,EAAIyB,MAAM,KAAKgK,MAEvB/I,SAEgB9S,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEmN,WAAU2F,WAIjEpT,GAASC,EAAAA,EAAAA,MACTD,EAAS,IACJA,EACH0O,YAAa,IACR1O,EAAO0O,YACVoN,QAAS,IACJ9b,EAAO0O,YAAYoN,QACtB,CAACrO,GAAWzN,EAAO0O,YAAYoN,QAAQrO,IAAWpF,QAAQiT,GAAWA,EAAO5K,MAAQA,QAI1F1M,EAAAA,EAAAA,IAAUhE,GAAO,KAGnB4H,EAAAA,EAAAA,IAAiB,6BAA6BtI,MAAOU,EAAQkE,EAAS8E,KACpE,MAAM,SAAEyE,EAAQ,uBAAE2O,EAAsB,MAAEva,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAClE2E,GAASC,EAAAA,EAAAA,IAAiB5N,EAAQyN,GACxC,GAAKE,EAAL,CAEA,GAAIA,EAAO0O,cAAgB1O,EAAO2O,cAAgBF,GAAyB,CACzE,MAAMG,QAAoBjc,EAAAA,EAAAA,IAAQ,gCAAiC,CAAEmN,aAWrE,OAVAzN,GAASC,EAAAA,EAAAA,MACTD,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9Bqb,cAAe,CACbmB,QAAS,CACP/O,WACAgP,iBAAkBF,KAGrB1a,QACHmC,EAAAA,EAAAA,IAAUhE,EAEZ,CAEAA,GAAS4M,EAAAA,EAAAA,GAAe5M,EAAQ,CAC9B0c,wBAAyBjP,GACxB5L,IAEHmC,EAAAA,EAAAA,IAAUhE,EArBS,CAqBF,KAGnB4H,EAAAA,EAAAA,IAAiB,8BAA8B,CAAC5H,EAAQkE,EAAS8E,KAC/D,MAAM,OAAE9H,EAAM,iBAAEyb,GAAqB3T,EAOrC,OALAhJ,GAASC,EAAAA,EAAAA,OACAgF,EAAAA,EAAAA,IAAWjF,EAAQkB,EAAQ,CAClCyb,oBAGW,KAGf/U,EAAAA,EAAAA,IAAiB,0BAA0BtI,MAAOU,EAAQkE,EAAS8E,KACjE,MAAM,OAAE9H,EAAM,UAAEoU,GAActM,EACxB7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAC3BiD,QAIUrE,UAFMQ,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE6D,OAAMmR,gBAI/DtV,GAASC,EAAAA,EAAAA,MAEPD,GADE4c,EAAAA,EAAAA,IAAS1b,IACF2b,EAAAA,EAAAA,IAAmB7c,EAAQkB,EAAQ,CAC1C4b,uBAAuBxH,QAAYxV,KAG5ByV,EAAAA,EAAAA,IAAmBvV,EAAQkB,EAAQ,CAC1C4b,uBAAuBxH,QAAYxV,KAGvCkE,EAAAA,EAAAA,IAAUhE,GAAO,G,mQCjnEnB,MAAM+c,EAAc,0oBAEpB,IAAIC,EACAC,EACAC,EAKG,SAASC,IAGd,OAFAC,IAEOxG,QAAQC,IAAItV,OAAOC,OAAO0b,GAAQhV,KAAKmV,IAC5C,MAAMC,EAAUD,EAAME,IAItB,OAHAF,EAAME,IAAMR,EACZM,EAAMG,OAAQ,EACdH,EAAMI,OAAS,KACRJ,EAAMK,OACVC,MAAK,KACJN,EAAMrV,QACNqV,EAAMI,OAAS,EACfJ,EAAMO,YAAc,EACpBP,EAAMG,OAAQ,GAEdK,EAAAA,EAAAA,KAAoB,KAClBR,EAAME,IAAMD,CAAO,GACnB,GACF,IAER,CAEO,SAASF,IACd,GAAIF,EACF,OAEF,MAAMY,EAAY,IAAIC,MAAM,wBACtBC,EAAkB,IAAID,MAAM,8BAClCC,EAAgBC,MAAO,EACvB,MAAMC,EAAa,IAAIH,MAAM,yBACvBI,EAAiB,IAAIJ,MAAM,+BAC3BK,EAAY,IAAIL,MAAM,mBACtBM,EAAe,IAAIN,MAAM,sBACzBO,EAAW,IAAIP,MAAM,kBACrBQ,EAAgB,IAAIR,MAAM,uBAChCQ,EAAcN,MAAO,EACrB,MAAMO,EAAe,IAAIT,MAAM,sBAC/BS,EAAaP,MAAO,EAEpBf,EAAS,CACPuB,KAAMX,EACNY,UAAWP,EACXQ,MAAOT,EACPU,WAAYZ,EACZa,SAAUN,EACVO,IAAKR,EACLS,QAASV,EACTW,KAAMZ,EACNa,QAAST,EAEb,CAEAlf,eAAe4f,EAAsClf,EAAW0E,GAC9D,MAAMrE,QAAeC,EAAAA,EAAAA,IAAQ,eAAgB,CAC3C6e,KAAMza,IAGR,IAAKrE,EAAQ,OAEbL,GAASC,EAAAA,EAAAA,MAET,MAAM2E,GAAoBC,EAAAA,EAAAA,IAAgB7E,EAAQ0E,EAAUjG,IAc5D,OAZAuB,GAAS8E,EAAAA,EAAAA,IACP9E,EACA0E,EAAUjG,IACVsG,EAAAA,EAAAA,IAAK1E,EAAOqE,UAAW,CAAC,yBACxB5E,EACA8E,GAAmBwa,cAAWtf,EAAYO,EAAOqE,UAAUM,mBAE7DhF,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAASyX,EAAAA,EAAAA,IAASzX,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,QAE7D4C,EAAAA,EAAAA,IAAUhE,GAEHK,EAAOqE,SAChB,CAEApF,eAAe+f,EACbrf,EACA0E,EAAkC4a,GAElC,MAAMjf,QAAeC,EAAAA,EAAAA,IAAQ,6BAA8B,CACzD6e,KAAMza,EACNqT,OAAQuH,IAGLjf,IAELL,GAASC,EAAAA,EAAAA,MAETD,GAAS8C,EAAAA,EAAAA,IAAS9C,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAO+B,MAAO,OAC7DpC,GAASyX,EAAAA,EAAAA,IAASzX,GAAQwC,EAAAA,EAAAA,IAAqBnC,EAAOe,MAAO,QAE7D4C,EAAAA,EAAAA,IAAUhE,GACZ,EAEA4H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAC5H,EAAQkE,EAAS8E,KACzD,MAAM,MAAE+C,EAAK,MAAElK,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GAAW,CAAC,EACzD,OAAO4D,EAAAA,EAAAA,GAAe5M,EAAQ,CAC5Buf,mBAAoB,UAAYvW,GAAW,CAAC,GAAK+C,IAASoB,EAAAA,EAAAA,IAAenN,EAAQ6B,GAAO0d,oBACvF1d,EAAM,KAGX+F,EAAAA,EAAAA,IAAiB,+BAA+BtI,MAAOU,EAAQkE,EAAS8E,KACtE,MAAM,WAAEwW,EAAU,GAAE/gB,GAAOuK,EACrBtE,GAAYG,EAAAA,EAAAA,IAAgB7E,EAAQvB,GAErCiG,IAED8a,UACIN,EAAelf,EAAQ0E,GAC7B1E,GAASC,EAAAA,EAAAA,YACHof,EAA2Brf,EAAQ0E,UAGrCpE,EAAAA,EAAAA,IAAQ,mCAAoC,CAChDkf,aACAL,KAAMza,IACN,KAGJkD,EAAAA,EAAAA,IAAiB,mBAAmBtI,MAAOU,EAAQkE,EAAS8E,KAC1D,MAAM,OAAE9H,EAAM,MAAEW,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAExC7E,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAChC,IAAKiD,EACH,OAGF,MAAM9D,QAAeC,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9Cqb,KAAMxX,IAGH9D,IAELL,GAASC,EAAAA,EAAAA,MACTD,GAAS8E,EAAAA,EAAAA,IAAgB9E,EAAQK,EAAO5B,GAAI,IACvC4B,EACHa,YAEF8C,EAAAA,EAAAA,IAAUhE,GAEVkE,EAAQub,8BAA8B,CAAEhhB,GAAI4B,EAAO5B,GAAIE,WAAY0B,EAAO1B,WAAYkD,UAAQ,KAGhG+F,EAAAA,EAAAA,IAAiB,6BAA6BtI,MAAOU,EAAQkE,EAAS8E,KACpE,MAAM,MAAEnH,GAAQ2C,EAAAA,EAAAA,OAAsBwE,GAAW,CAAC,EAC5CtE,GAAYgb,EAAAA,EAAAA,IAAsB1f,GAExC,IAAK0E,IAAcA,EAAUxD,OAC3B,OAGF,MAAMiD,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQ0E,EAAUxD,QAC1C,IAAKiD,EACH,OAGF,MAAMwb,EAAoBrX,SAAQsX,EAAAA,EAAAA,IAAgBzb,IAElD,IAAI0b,GAAalK,EAAAA,EAAAA,IAAmB3V,EAAQmE,EAAK1F,KAAKohB,WAClDF,IACFE,QAAmBvf,EAAAA,EAAAA,IAAQ,wBAAyB,CAClD6e,KAAMza,EACNob,eAAe,KAIdD,KAILE,EAAAA,EAAAA,IAAoBF,GACpB3b,EAAQgC,iBAAiB,CACvB9F,QAAS,2BACTyB,UACA,KAGJ+F,EAAAA,EAAAA,IAAiB,uBAAuBtI,MAAOU,EAAQkE,EAAS8E,KAC9D,MAAM,SAAEzD,EAAQ,WAAEkO,EAAU,MAAE5R,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAEtD7E,QAAamB,EAAAA,EAAAA,IAAoBtF,EAAQuF,GAE/C,IAAKpB,EAEH,YADAD,EAAQgC,iBAAiB,CAAE9F,QAAS+F,EAAAA,GAAuB,mBAAoBtE,UAIjF7B,GAASC,EAAAA,EAAAA,MACT,MAAM+f,QAAa/b,EAAAA,EAAAA,IAAajE,EAAQkE,EAASC,EAAMtC,GAEnDme,GAAMtb,WACRR,EAAQub,8BAA8B,CACpChhB,GAAIuhB,EAAKtb,UAAUjG,GACnBE,WAAYqhB,EAAKtb,UAAU/F,WAC3B8U,aACA5R,SAEJ,KAGF+F,EAAAA,EAAAA,IAAiB,iCAAiC,CAAC5H,EAAQkE,EAAS8E,KAClE9E,EAAQ+b,2BAA2B,CACjCjH,OAAQ,gBACRhQ,UACAnH,MAAOmH,EAAQnH,QAAS2C,EAAAA,EAAAA,OACxB,KAGJoD,EAAAA,EAAAA,IAAiB,8BAA8B,CAAC5H,EAAQkE,EAAS8E,KAC/D9E,EAAQ+b,2BAA2B,CACjCjH,OAAQ,aACRhQ,aAASlJ,EACT+B,MAAOmH,GAASnH,QAAS2C,EAAAA,EAAAA,OACzB,KAGJoD,EAAAA,EAAAA,IAAiB,iBAAiBtI,MAAOU,EAAQkE,EAAS8E,KACxD,MAAM,OACJ9H,EAAM,GAAEzC,EAAE,WAAEE,EAAU,WAAE8U,EAAU,MAAE5R,GAAQ2C,EAAAA,EAAAA,OAC1CwE,EAEJ,IAAKkX,EAAAA,GAKH,YAJAhc,EAAQgC,iBAAiB,CACvB9F,QAAS,kDACTyB,UAKJ,GAAI7B,EAAOmgB,UAET,YADAjc,EAAQkc,qBAAqB,CAAEve,WA+JnC,WACE,MAAMwe,EAXE,IAAKtO,OAAOuO,cAAiBvO,OAAewO,oBAYpDvD,EAAe,IAAIe,MACnBd,EAAeoD,EACfrD,EAAawD,UAAYC,EAAQJ,IACjCK,EAAAA,EAAAA,GAAS1D,EACX,CAjKE2D,GAEAvD,IAEKwD,EADL5gB,GAASC,EAAAA,EAAAA,MACuCiE,GAAS,EAAMrC,GAE/D,MAAQgf,YAAY,kBAAEC,IAAwB9gB,EAC9C,IAAI0E,EAAYjG,GAAKoG,EAAAA,EAAAA,IAAgB7E,EAAQvB,IAAMsiB,EAAAA,EAAAA,IAAoB/gB,EAAQkB,GAE/E,GAAIwD,GAAaA,EAAUjG,KAAOqiB,EAChC5c,EAAQkc,qBAAqB,CAAEve,eAIjC,GAAIif,EACE,mBAAoB5c,GACtBA,EAAQ8c,eAAe,CACrBC,OAAQjY,EACRnH,eAMN,GAAI6C,GAAaoc,IAAsBpc,EAAUjG,GAC/CyF,EAAQkc,qBAAqB,CAAEve,cADjC,CAKA,GAAK6C,GAAejG,GAAOE,IAAeuC,GAQ9BwD,GAAajG,GAAME,IAC7B+F,QAAkBwa,EAAelf,EAAQ,CACvCvB,KACAE,oBAX8C,CAChD,MAAMwF,GAAOlD,EAAAA,EAAAA,IAAWjB,EAAQkB,GAEhC,IAAKiD,EAAM,aAELF,EAAAA,EAAAA,IAAajE,EAAQkE,EAASC,EAAMtC,GAC1C7B,GAASC,EAAAA,EAAAA,MACTyE,GAAYqc,EAAAA,EAAAA,IAAoB/gB,EAAQkB,EAC1C,CAOKwD,IAEL1E,GAASC,EAAAA,EAAAA,MACTD,GAAS8E,EAAAA,EAAAA,IACP9E,EACA0E,EAAUjG,GACV,IACKiG,EACH+O,mBAEF3T,EACA4E,EAAUM,kBAAoB,GAEhChF,EAAS,IACJA,EACH6gB,WAAY,IACP7gB,EAAO6gB,WACVC,kBAAmBpc,EAAUjG,MAIjCuF,EAAAA,EAAAA,IAAUhE,GAEVkE,EAAQkc,qBAAqB,CAAErU,OAAO,EAAOlK,UAxC7C,CAwCqD,KAGvD+F,EAAAA,EAAAA,IAAiB,sBAAsB,CAAC5H,EAAQkE,EAAS8E,KACvD,MAAM,MAAEqU,GAAUrU,EAEbkU,EAAOG,KAKI,eAAVA,GACFH,EAAO0B,WAAW5W,QAEN,aAAVqV,GACFH,EAAO2B,SAAS7W,QAEJ,YAAVqV,GACFH,EAAO+B,QAAQjX,SAEjB0Y,EAAAA,EAAAA,GAASxD,EAAOG,IAGV,KAGVzV,EAAAA,EAAAA,IAAiB,iCAAkC5H,IACjD,MAAM0E,GAAYgb,EAAAA,EAAAA,IAAsB1f,GACnC0E,GAIA2a,EAA2Brf,EAAQ0E,EAAWA,EAAU4a,WAAW,KAG1E1X,EAAAA,EAAAA,IAAiB,+BAA+B,CAAC5H,EAAQkE,EAAS8E,KAChE9E,EAAQ+b,2BAA2B,CACjCjH,OAAQ,cACRhQ,UACAnH,MAAOmH,EAAQnH,QAAS2C,EAAAA,EAAAA,OACxB,KAGJoD,EAAAA,EAAAA,IAAiB,eAAe,CAAC5H,EAAQkE,EAAS8E,KAChD,MAAM,OAAEqE,EAAM,QAAE6T,EAAO,MAAErf,GAAQ2C,EAAAA,EAAAA,OAAsBwE,EAEnDhJ,EAAOmgB,UACTjc,EAAQkc,qBAAqB,CAAEve,WAIpBkE,EAAAA,EAAAA,IAAW/F,EAAQqN,KAMhC+P,IAEKwD,EADL5gB,GAASC,EAAAA,EAAAA,MACuCiE,EAASgd,EAASrf,GAElE7B,GAASC,EAAAA,EAAAA,MACTD,EAAS,IACJA,EACHmgB,UAAW,CACT1hB,GAAI,GACJ0iB,MAAO,aACPC,cAAe/T,EACf6T,UACAG,QAASrhB,EAAOmC,iBAGpB6B,EAAAA,EAAAA,IAAUhE,GAEVkE,EAAQkc,qBAAqB,CAAErU,OAAO,EAAOlK,UAAQ,IAOvD,MAAM4e,EAAWJ,IACf,MAAMiB,EAAajB,EAAIkB,mBACjBC,EAAMF,EAAWvC,QAAQsB,EAAIoB,gCAEnC,OADAH,EAAWzN,QACJ,IAAI6N,YAAY,CAACngB,OAAOogB,OAAQH,EAAYI,OAAOC,iBAAiB,GAAI,CAAEC,SAAS,KAAU,EAW/F,SAASC,IACd,OAAO/E,CACT,CAEO,SAASgF,IACd,OAAO/E,CACT,CAEO,SAASgF,IACdjF,GAAchV,QACdiV,OAAend,EACfkd,OAAeld,CACjB,CAKO,SAAS8gB,EACd5gB,EACAkE,EAAgCgd,GAEhC,QAAA9c,EAAAxE,UAAAC,OAAAsI,EAAA,IAAA7D,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAA4D,EAAA5D,EAAA,GAAA3E,UAAA2E,GAAA,IADI1C,GAAQ2C,EAAAA,EAAAA,OAAkB2D,EAE1B+Y,EACFgB,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC1C1E,MAAMiE,IACkC,IAAnCA,EAAOU,iBAAiBziB,OAC1BqE,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,qBAChCtE,WAGF+f,EAAOW,YAAYjf,SAASkf,GAAUA,EAAMC,SAC5CC,EAA0B1iB,EAAQkE,EAASrC,GAC7C,IAED8gB,OAAM,KACLze,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,qBAChCtE,SACA,IAGN6gB,EAA0B1iB,EAAQkE,EAASrC,EAE/C,CAEA,SAAS6gB,EACP1iB,EAAWkE,GACX,QAAAgD,EAAAtH,UAAAC,OAAA2J,EAAA,IAAAlF,MAAA4C,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAoC,EAAApC,EAAA,GAAAxH,UAAAwH,GAAA,IAD+CvF,GAAQ2C,EAAAA,EAAAA,OAAkBgF,EAEzE0Y,UAAUC,aAAaC,aAAa,CAAEQ,OAAO,IAC1CjF,MAAMiE,IACkC,IAAnCA,EAAOC,iBAAiBhiB,OAC1BqE,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,yCAChCtE,UAGF+f,EAAOW,YAAYjf,SAASkf,GAAUA,EAAMC,QAC9C,IAEDE,OAAM,KACLze,EAAQgC,iBAAiB,CACvB9F,QAAS+F,EAAAA,GAAuB,yCAChCtE,SACA,GAER,C,+GClfO,SAASiD,EACd9E,EACA6iB,EACAC,EACAC,EACAC,GAEA,MAKMC,EALa1hB,OAAOC,OAAO,IAC5BxB,EAAO6gB,WAAWxe,KAAKwgB,IAAcI,gBACrCH,EAAgBG,eAEO5a,QAAOF,IAAA,IAAC,OAAE+a,GAAQ/a,EAAA,OAAM+a,CAAM,IAC5B3Z,QAAO,CAAC8P,EAA2CC,KAC/ED,EAAIC,EAAG7a,IAAM6a,EACND,IACN,CAAC,GAEJ,MAAO,IACFrZ,EACH6gB,WAAY,IACP7gB,EAAO6gB,WACVxe,KAAM,IACDrC,EAAO6gB,WAAWxe,KACrB,CAACwgB,GAAc,IACV7iB,EAAO6gB,WAAWxe,KAAKwgB,OACvB9d,EAAAA,EAAAA,IAAK+d,EAAiB,CAAC,yBACtBC,GAAyB,CAC3B/d,kBAAmBhF,EAAO6gB,WAAWxe,KAAKwgB,GAAa7d,kBAAoB+d,WAE/CjjB,IAA1BkjB,GAAuC,CACzChe,kBAAmBge,GAErBC,kBAKV,CAEO,SAASE,EACdnjB,EACA6iB,GAEA,MAAMne,GAAYG,EAAAA,EAAAA,IAAgB7E,EAAQ6iB,GAU1C,OATIne,GAAaA,EAAUxD,SACZD,EAAAA,EAAAA,IAAWjB,EAAQ0E,EAAUxD,UAExClB,GAASuV,EAAAA,EAAAA,IAAmBvV,EAAQ0E,EAAUxD,OAAQ,CACpD2hB,iBAAa/iB,KAKZ,IACFE,EACH6gB,WAAY,IACP7gB,EAAO6gB,WACVxe,KAAM,KACD0C,EAAAA,EAAAA,IAAK/E,EAAO6gB,WAAWxe,KAAM,CAACwgB,EAAY5Q,eAIrD,CAEO,SAASmR,EACdpjB,EACA8iB,EACAE,GAEA,OAAKhjB,EAAO6gB,WAAWC,kBAIhBhc,EAAgB9E,EACrBA,EAAO6gB,WAAWC,kBAClBgC,OACAhjB,EACAkjB,GAPOhjB,CAQX,CAEO,SAASqjB,EACdrjB,EACA6iB,EACAxV,EACAiW,GAEG,IADHC,EAAa3jB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEb,MAAM8E,GAAYG,EAAAA,EAAAA,IAAgB7E,EAAQ6iB,GAC1C,OAAKne,EAIEI,EAAgB9E,EAAQ6iB,EAAa,CAC1CI,aAAc,IACTve,EAAUue,aACb,CAAC5V,GAAS,IACL3I,EAAUue,aAAa5V,MACvBiW,KAGNA,EAAkBJ,OAChBK,EAAgB,GAAK,EACrB7e,EAAUue,aAAa5V,IAAWkW,EAAgB,EAAI,GAblDvjB,CAcX,C","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiError, ApiChatMember, ApiChatFolder, ApiChatlistExportedInvite,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n} from '../../../types';\nimport type {\n  GlobalState, ActionReturnType, TabArgs,\n} from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo,\n  updateListedTopicIds,\n  updateChatFullInfo,\n  replaceChatFullInfo,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n  selectTabState, selectThreadOriginChat, selectThread, selectChatFullInfo,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  isUserId,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID, noRequestThreadInfoUpdate, tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== id || currentThreadId !== threadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === id, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      callApi('abortChatRequests', { chatId: currentChatId, threadId: isChatOpened ? currentThreadId : undefined });\n    }\n  }\n\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID && !noRequestThreadInfoUpdate) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({\n        id, threadId, tabId, noRequestThreadInfoUpdate: true,\n      });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({\n        id,\n        threadId: result.topMessageId,\n        tabId,\n        shouldReplaceLast: true,\n        noRequestThreadInfoUpdate: true,\n      });\n    } else {\n      actions.openChat({\n        id,\n        threadId: topMessageId,\n        tabId,\n        noRequestThreadInfoUpdate: true,\n      });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n      return;\n    }\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && commentId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chatId);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chatId, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  if (isUserId(chatId)) {\n    global = updateUserFullInfo(global, chatId, {\n      isTranslationDisabled: isEnabled ? undefined : true,\n    });\n  } else {\n    global = updateChatFullInfo(global, chatId, {\n      isTranslationDisabled: isEnabled ? undefined : true,\n    });\n  }\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChatFullInfo } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","arguments","length","undefined","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","_ref7","tabId","currentChat","selectCurrentChat","visibleUsers","_ref8","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len","_ref9","Array","_key","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","replaceChatFullInfo","stickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len3","_ref11","_key3","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref13","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref14","_key6","isChatBasicGroup","newChat","_len2","_ref10","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","noRequestThreadInfoUpdate","currentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","reduce","_ref2","_ref3","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","openPreviousChat","shouldReplaceLast","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","_payload$isMuted","muteUntil","isMuted","_payload$isMuted2","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","InProgress","Error","channelId","selectTabState","Complete","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref4","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","text","formatShareText","slug","chatOrChannelPostId","Number","commentId","comment","inviteHash","voicechat","livestream","substring","start","startApp","startapp","originalParts","webAppName","isWebApp","usernames","c","channelPostId","_len4","_ref12","_key4","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","discussionChatId","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","_ref5","formattedText","replyingToId","readInboxMessageIdByTopicId","_ref6","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","isUserId","updateUserFullInfo","isTranslationDisabled","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}