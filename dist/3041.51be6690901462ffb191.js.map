{"version":3,"file":"3041.51be6690901462ffb191.js","mappings":"0QAsBA,MA8IA,GAAeA,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuBC,EAAAA,EAAAA,IAAKD,EAAQ,CAAC,kBAAmB,mBAAoB,gBAAiB,eAD5ED,EA5IaG,IAK3B,IAL4B,gBAChCC,EAAe,cAEfC,EAAa,UACbC,GACDH,EACC,MAAM,YACJI,EAAW,wBACXC,EAAuB,eACvBC,IACEC,EAAAA,EAAAA,MAEEC,GAAOC,EAAAA,EAAAA,KAEPC,GAAWC,EAAAA,EAAAA,IAAyB,MAEpCC,GAAeD,EAAAA,EAAAA,IAAuB,OAErCE,EAAMC,IAAWC,EAAAA,EAAAA,IAAiB,KAClCC,EAAYC,IAAiBF,EAAAA,EAAAA,KAAS,GAEvCG,GAAwBP,EAAAA,EAAAA,IAAeQ,OAAOC,OAAOC,eAAgBC,SACrEC,GAAYZ,EAAAA,EAAAA,KAAgB,IAElCa,EAAAA,EAAAA,KAAU,KACHC,EAAAA,IACHf,EAASgB,QAASC,QAUpBjB,EAASgB,QAASE,iBAAiB,WAAW,KACvCL,EAAUG,UACbhB,EAASgB,QAASG,MAAMC,UAAY,uBACpCpB,EAASgB,QAASG,MAAME,WAAa,cACrCC,YAAW,KACTtB,EAASgB,QAASG,MAAMC,UAAY,OACpC,MAAMG,EAAcrB,EAAac,QAASQ,aACtChB,EAAsBQ,SAAYN,OAAee,sBAAwB,GAAK,KAAO,GAErFF,EAAc,IAChBrB,EAAac,QAASG,MAAMC,UAAa,eAAcG,OACvDrB,EAAac,QAASG,MAAMO,WAAa,yBAE3CJ,YAAW,KACTtB,EAASgB,QAASG,MAAME,WAAa,SAAS,GAC7C,IAAI,GACN,IACHR,EAAUG,SAAU,EACtB,IAGFhB,EAASgB,QAASE,iBAAiB,QAAQ,KACzCL,EAAUG,SAAU,EACpBd,EAAac,QAASG,MAAMC,UAAY,gBACxClB,EAAac,QAASG,MAAMO,WAAa,uBAAuB,GAChE,GACD,KAEHC,EAAAA,EAAAA,GAAe,CACbC,UAAU,EACVC,OAAQlC,IAGV,MAAMmC,GAAeC,EAAAA,EAAAA,KAAaC,IAC5BvC,GACFG,IAGF,MAAQqC,cAAeC,GAAWF,EAClCE,EAAOC,MAAQD,EAAOC,MAAMC,QAAQ,SAAU,IAAIC,OAAO,EA7EzC,GA+EZH,EAAOC,QAAUhC,IAIrBC,EAAQ8B,EAAOC,OAEV7B,EAEO4B,EAAOC,MAAMG,QACvB/B,GAAc,GAFdA,GAAc,GAtFA,IA2FZ2B,EAAOC,MAAMG,QACf5C,EAAY,CAAES,KAAM+B,EAAOC,QAC7B,GACC,CAAC1C,EAAWG,EAAgBO,EAAMG,EAAYZ,IAM3C6C,EAAc7B,OAAe8B,aAAe,GAAK,EAAK9B,OAAe8B,aAAe,GAAK,EAE/F,OACEC,EAAAA,GAAAC,cAAA,OAAKC,UAAU,iBAAiBxB,MAAQ,gBAAeoB,OACrDE,EAAAA,GAAAC,cAAA,OAAKE,IAAK1C,EAAcyC,UAAU,aAChCF,EAAAA,GAAAC,cAAA,OAAKG,GAAG,SACRJ,EAAAA,GAAAC,cAAA,MAAIC,UAAU,eACXpD,EACDkD,EAAAA,GAAAC,cAAA,OACEC,UAAU,8BACVG,QAdV,WACEnD,GACF,EAaUoD,KAAK,SACLC,SAAU,EACVC,MAAOnD,EAAK,gBAEZ2C,EAAAA,GAAAC,cAAA,KAAGC,UAAU,qBAGjBF,EAAAA,GAAAC,cAAA,KAAGC,UAAU,QACVO,EAAAA,EAASC,aAAuB,IAACV,EAAAA,GAAAC,cAAA,WAAM,IAAEQ,EAAAA,EAASE,cAErDX,EAAAA,GAAAC,cAAA,OAAKC,UAAU,SACZO,EAAAA,EAASG,WAEZZ,EAAAA,GAAAC,cAACY,EAAAA,EAAS,CACRV,IAAK5C,EACL2C,UAAU,8BACVE,GAAG,eACHU,YAAazD,EAAK,6BAClB0D,QAAS1B,EACTK,MAAOhC,EACPsD,MAAOhE,GAAaK,EAAKL,GACzBiE,aAAa,MACbC,UAAU,UACVC,UAAWpE,EACXqE,YAAY,YAGZ,K,0BCjJV,MAoCA,GAAe3E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuBC,EAAAA,EAAAA,IAAKD,EAAQ,CAAC,gBAAiB,YAAa,cADlDD,EApCiBG,IAE/B,IAFgC,cACpCE,EAAa,UAAEC,EAAS,SAAEqE,GAC3BxE,EACC,MAAM,gBAAEyE,EAAe,eAAEnE,IAAmBC,EAAAA,EAAAA,MAEtCC,GAAOC,EAAAA,EAAAA,MACNiE,EAAcC,IAAmB5D,EAAAA,EAAAA,KAAS,GAE3C6D,GAAiCnC,EAAAA,EAAAA,KAAaoC,IAClDF,EAAgBE,EAAU,GACzB,IAEGC,GAAerC,EAAAA,EAAAA,KAAasC,IAChCN,EAAgB,CAAEM,YAAW,GAC5B,CAACN,IAEJ,OACEtB,EAAAA,GAAAC,cAAA,OAAKG,GAAG,qBAAqBF,UAAU,iBACrCF,EAAAA,GAAAC,cAAA,OAAKC,UAAU,aACbF,EAAAA,GAAAC,cAAC4B,EAAAA,EAAc,CAACC,kBAAmBP,IACnCvB,EAAAA,GAAAC,cAAA,UAAK5C,EAAK,0BACV2C,EAAAA,GAAAC,cAAA,KAAGC,UAAU,QAAQ7C,EAAK,mCAC1B2C,EAAAA,GAAAC,cAAC8B,EAAAA,EAAY,CACXC,WAAY7E,EACZ6D,MAAOhE,GAAaK,EAAKL,GACzBiF,KAAMZ,EACNa,UAAWnF,EACX+E,kBAAmBP,EACnBY,2BAA4BV,EAC5BW,SAAUT,KAGV,K,wBC9BV,MAqEA,GAAelF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACjBC,IAAuBC,EAAAA,EAAAA,IAAKD,EAAQ,CAAC,gBAAiB,eADrCD,EArEiBG,IAE/B,IAFgC,cACpCE,EAAa,UAAEC,GAChBH,EACC,MAAM,OAAEwF,EAAM,eAAElF,EAAc,mBAAEmF,IAAuBlF,EAAAA,EAAAA,MAEjDC,GAAOC,EAAAA,EAAAA,MACNiF,EAAeC,IAAoB5E,EAAAA,EAAAA,KAAS,IAC5C6E,EAAaC,IAAkB9E,EAAAA,EAAAA,OAC/B+E,EAAWC,IAAgBhF,EAAAA,EAAAA,IAAS,KACpCiF,EAAUC,IAAelF,EAAAA,EAAAA,IAAS,IAEnCmF,GAAwBzD,EAAAA,EAAAA,KAAa0D,IACrChG,GACFG,IAGF,MAAM,OAAEsC,GAAWuD,EAEnBJ,EAAanD,EAAOC,OACpB8C,EAAiB/C,EAAOC,MAAMG,OAAS,EAAE,GACxC,CAAC7C,EAAWG,IAET8F,GAAuB3D,EAAAA,EAAAA,KAAa0D,IACxC,MAAM,OAAEvD,GAAWuD,EAEnBF,EAAYrD,EAAOC,MAAM,GACxB,IAYH,OACEM,EAAAA,GAAAC,cAAA,OAAKG,GAAG,yBAAyBF,UAAU,iBACzCF,EAAAA,GAAAC,cAAA,OAAKC,UAAU,aACbF,EAAAA,GAAAC,cAAA,QAAMiD,OAAO,GAAGC,OAAO,OAAOf,SAbpC,SAAsBY,GACpBA,EAAMI,iBAENf,EAAO,CAAEM,YAAWE,aAEhBJ,GACFH,EAAmB,CAAEe,KAAMZ,GAE/B,GAMQzC,EAAAA,GAAAC,cAACqD,EAAAA,EAAc,CAACC,SAAUb,IAC1B1C,EAAAA,GAAAC,cAAA,UAAK5C,EAAK,aACV2C,EAAAA,GAAAC,cAAA,KAAGC,UAAU,QAAQ7C,EAAK,wBAC1B2C,EAAAA,GAAAC,cAACY,EAAAA,EAAS,CACRT,GAAG,0BACHoD,MAAOnG,EAAK,wCACZkG,SAAUR,EACVrD,MAAOiD,EACP3B,MAAOhE,GAAaK,EAAKL,GACzBiE,aAAa,eAEfjB,EAAAA,GAAAC,cAACY,EAAAA,EAAS,CACRT,GAAG,yBACHoD,MAAOnG,EAAK,uCACZkG,SAAUN,EACVvD,MAAOmD,EACP5B,aAAa,gBAEdsB,GACCvC,EAAAA,GAAAC,cAACwD,EAAAA,EAAM,CAACC,KAAK,SAASC,QAAM,EAACzB,UAAWnF,GAAgBM,EAAK,WAI/D,I,kJC9CV,MA+HA,GAAeZ,EAAAA,EAAAA,KA/HoBI,IAgB7B,IAhB8B,UAClCqF,GAAY,EAAK,kBACjBJ,EAAiB,MACjBd,EAAK,KACLiB,EAAI,YACJnB,EAAc,WAAU,YACxB8C,EAAc,OAAM,YACpBC,EAAW,iBACXC,EAAgB,iBAChBC,EAAgB,6BAChBC,GAA+B,EAAK,SACpCC,GAAW,EAAK,WAChBjC,EAAU,2BACVG,EAA0B,cAC1B+B,EAAa,SACb9B,GACDvF,EAEC,MAAMU,GAAWC,EAAAA,EAAAA,IAAyB,MACpCH,GAAOC,EAAAA,EAAAA,MAEP,SAAE6G,IAAaC,EAAAA,EAAAA,OACdxC,EAAUyC,IAAezG,EAAAA,EAAAA,IAAS,KAClC0G,EAAWC,IAAgB3G,EAAAA,EAAAA,KAAS,GACrC4G,EAAsBL,EAAW,IAAM,IAgE7C,OA9DA9F,EAAAA,EAAAA,KAAU,KACJ0F,GACFM,EAAY,GACd,GACC,CAACN,KAEJU,EAAAA,EAAAA,IAAW,KACJnG,EAAAA,IACHf,EAASgB,QAASC,OACpB,GACCgG,IAEHnG,EAAAA,EAAAA,KAAU,KACJ2C,IACF0D,EAAAA,EAAAA,KAAgB,KACdnH,EAASgB,QAASC,QAClBjB,EAASgB,QAASoG,QAAQ,GAE9B,GACC,CAAC3D,IA4CFhB,EAAAA,GAAAC,cAAA,QAAMiD,OAAO,GAAGd,SAAUA,EAzB5B,SAAsBY,GACpBA,EAAMI,iBAEFlB,GAIAoC,GACFlC,EAAUR,EAEd,EAesDgD,EAAAA,EAAW3D,aAAa,OAC1EjB,EAAAA,GAAAC,cAAA,OACEC,WAAW2E,EAAAA,EAAAA,GAAe,6BAA8BjD,GAAY,UAAWZ,GAAS,SACxF8D,IAAKzH,EAAK0H,MAAQ,WAAQC,GAEzBhB,GAhBHhE,EAAAA,GAAAC,cAAA,SACEyD,KAAK,WACLtD,GAAG,mBACHa,aAAa,MACbf,UAAU,kBACVK,UAAW,IAYXP,EAAAA,GAAAC,cAAA,SACEE,IAAK5C,EACL2C,UAAU,eACVwD,KAAM5B,EAAoB,OAAS,WACnC1B,GAAG,mBACHV,MAAOkC,GAAY,GACnBX,aAAc+C,EAA+B,gBAAkB,mBAC/DT,SAvDR,SAA0BhE,GACpByB,GACFgB,IAGF,MAAM,OAAEvC,GAAWF,EACnB8E,EAAY5E,EAAOC,OACnB6E,EAAa9E,EAAOC,MAAMG,QAAUoF,EAAAA,KAChCf,GACFA,EAAczE,EAAOC,MAEzB,EA6CQwF,UAAW,IACXJ,IAAI,SAEN9E,EAAAA,GAAAC,cAAA,aAAQe,GAASiB,GAAQnB,GACzBd,EAAAA,GAAAC,cAAA,OACEC,UAAU,6BACVG,QAjDR,WACE8B,GAA4BL,EAC9B,EAgDQxB,KAAK,SACLC,SAAU,EACVC,MAAM,8BAENR,EAAAA,GAAAC,cAAA,KAAGC,WAAW2E,EAAAA,EAAAA,GAAe,OAAQ/C,EAAoB,WAAa,uBAGzE+B,GAAe7D,EAAAA,GAAAC,cAAA,KAAGC,UAAU,eAAe2D,GAC3CzB,IAAakC,GAAaR,IACzB9D,EAAAA,GAAAC,cAACwD,EAAAA,EAAM,CAACC,KAAK,SAASC,QAASM,EAAU/B,UAAWA,EAAWiD,UAAWb,GACvEV,GAGA,G,oHC5IX,MACMwB,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAoCjD,GAAe7I,EAAAA,EAAAA,KAlCsBI,IAAkC,IAAjC,kBAAEiF,EAAiB,MAAEyD,GAAO1I,EAChE,MAAO2I,EAAqBC,IAAyBC,EAAAA,EAAAA,IAAQ,IACtDC,EAAaC,IAAiBF,EAAAA,EAAAA,IAAQ,IACvC,SAAEvB,IAAaC,EAAAA,EAAAA,MAEfyB,EAAa1B,EAAW2B,EAAAA,IAA2BC,EAAAA,KAEzDtB,EAAAA,EAAAA,GAAWmB,EAZkB,KAa7B,MAAMI,GAAwB1G,EAAAA,EAAAA,IAAYmG,EAAuB,CAACA,IAElE,OACEzF,EAAAA,GAAAC,cAAA,OAAKG,GAAG,SAASF,UAAWqF,EAAQ,MAAQ,KACxCC,GACAxF,EAAAA,GAAAC,cAAA,OAAKC,UAAU,mBAEjBF,EAAAA,GAAAC,cAACgG,EAAAA,EAAe,CACdC,KAAMX,EAAQY,EAAAA,IAAsBN,EACpC3F,UAAWyF,EAAc,SAAW,QACpCS,OAAQC,EAAAA,EAAeC,YACvBC,YAAanB,EACboB,QAAM,EACNC,OAAQT,IAEVhG,EAAAA,GAAAC,cAACgG,EAAAA,EAAe,CACdC,KAAMX,EAAQY,EAAAA,IAAsBN,EACpC3F,UAAWyF,EAAc,QAAU,SACnCS,OAAQC,EAAAA,EAAeK,WACvBH,YAAazE,EAAoBuD,EAAsBC,EACvDkB,QAAM,IAEJ,G,kDCpDV,MAcA,EAdoCG,CAClCC,EAAqCC,EAAiBC,KAEtD,MAAMC,GAAcvJ,EAAAA,EAAAA,MAEpB,OAAOwJ,EAAAA,EAAAA,KAAgB,KACrB,MAAMC,EAAWF,EAAYxI,QAG7B,OAFAwI,EAAYxI,QAAUsI,EAEfD,EAAGK,GAAY,GAAG,GAExBJ,EAAcC,EAAS,C,6DCK5B,QAdA,SAAoBI,EAAsBC,GAAmD,IAAnCN,EAA4BO,UAAAvH,OAAA,QAAAmF,IAAAoC,UAAA,GAAAA,UAAA,GAAG,GACvF,MAAMC,GAAgBC,EAAAA,EAAAA,GAAgBJ,IAEtC7I,EAAAA,EAAAA,KAAU,KACR,GAAqB,iBAAV8I,EACT,OAGF,MAAM/G,EAAKvB,YAAW,IAAMwI,KAAiBF,GAC7C,MAAO,IAAMI,aAAanH,EAAG,GAE5B,CAAC+G,EAAOE,KAAkBR,GAC/B,C,iCCHA,MAAMW,EAAgD,CACpDC,MAAO,UACPC,UAAW,cACXC,OAAQ,WACRC,IAAK,QACLC,OAAQ,QACRC,QAAS,OACTC,UAAW,SACXC,UAAW,SACXC,WAAY,UACZC,IAAK,SAGDC,EAA2C,CAC/CC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRC,OAAQ,GACRC,QAAS,GACTC,MAAO,IAGM,SAASC,EAAyBC,GAiB/C,OAhBKC,KACHC,SAASvK,iBAAiB,UAAWwK,GAAe,GAGrDC,OAAOC,KAAKL,GAAgCM,SAASC,IACpD,MAAMC,EAAUR,EAAQO,GACxB,IAAKC,EACH,OAGF,MAAMC,EAAuBpB,EAASkB,GAClCE,GACFA,EAAqBC,KAAKF,EAC5B,IAGK,MA6BT,SAAiCR,GAC9BI,OAAOC,KAAKL,GAAgCM,SAASC,IACpD,MAAMC,EAAUR,EAAQO,GAClBE,EAAuBpB,EAASkB,GACtC,GAAIE,EAAsB,CACxB,MAAME,EAAQF,EAAqBG,WAAW9C,GAAOA,IAAO0C,KAC7C,IAAXG,GACFF,EAAqBI,OAAOF,EAAO,EAEvC,KAGGV,KACHC,SAASY,oBAAoB,UAAWX,GAAe,EAE3D,CA3CIY,CAAwBf,EAAQ,CAEpC,CAEA,SAASC,IACP,OAAOG,OAAOY,OAAO3B,GAAU4B,MAAMC,GAAgBC,QAAQD,EAAYnK,SAC3E,CAEA,SAASoJ,EAAc1J,GACrB,MAAM8J,EAAc7B,EAAiBjI,EAAE2K,KACvC,IAAKb,EACH,OAGF,MAAM,OAAExJ,GAAWsI,EAASkB,GAC5B,GAAKxJ,EAIL,IAAK,IAAIsK,EAAItK,EAAS,EAAGsK,GAAK,EAAGA,IAE/B,IAAmB,KAAfb,EADYnB,EAASkB,GAAac,IAC1B5K,GAAc,CACxBA,EAAE6K,kBACF,KACF,CAEJ,C,sDClFA,IAAIC,EAAU,EAEP,SAASC,IACdD,GAAW,CACb,CAEO,SAASE,IACdF,GAAW,CACb,CAEO,SAASG,IACd,OAAOH,EAAU,CACnB,C,kDCVe,SAASI,EAA+BC,GAgBrD,OAfA,SAA0BC,GACxB,MAAMC,GAAWpN,EAAAA,EAAAA,IAAOmN,GAWxB,OATIA,EAAME,OACRD,EAASrM,QAAUoM,EAEnBC,EAASrM,QAAU,IACdqM,EAASrM,QACZsM,QAAQ,GAILH,EAAUE,EAASrM,QAC5B,CAGF,C,kCCjBA,MAKA,EALmBgB,IACjBA,EAAE6K,kBACF7K,EAAE6D,gBAAgB,C,iBCJL,SAAS0H,EAAUC,GAChC,SAAS9B,EAAc1J,GACrB,GAAc,QAAVA,EAAE2K,IACJ,OAGF3K,EAAE6D,iBACF7D,EAAE6K,kBAEF,MAAMY,EAAoBC,MAAMC,KAC9BH,EAAQI,iBAAiB,6EAE3B,IAAKH,EAAkBnL,OACrB,OAGF,MAAMuL,EAAsBJ,EAAkBtB,WAAW2B,GAAOA,EAAGC,WAAWtC,SAASuC,iBACvF,IAAIC,EAAkB,EAClBJ,GAAuB,IAEvBI,EADEjM,EAAEkM,SACcL,EAAsB,EACpCA,EAAsB,EACtBJ,EAAkBnL,OAAS,EAEbuL,EAAsBJ,EAAkBnL,OAAS,EAC/DuL,EAAsB,EACtB,GAIRJ,EAAkBQ,GAAiBhN,OACrC,CAIA,OAFAwK,SAASvK,iBAAiB,UAAWwK,GAAe,GAE7C,KACLD,SAASY,oBAAoB,UAAWX,GAAe,EAAM,CAEjE,C","sources":["webpack://telegram-t/./src/components/auth/AuthCode.tsx","webpack://telegram-t/./src/components/auth/AuthPassword.tsx","webpack://telegram-t/./src/components/auth/AuthRegister.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/hooks/useTimeout.ts","webpack://telegram-t/./src/util/captureKeyboardListeners.ts","webpack://telegram-t/./src/util/directInputManager.ts","webpack://telegram-t/./src/util/hoc/freezeWhenClosed.ts","webpack://telegram-t/./src/util/stopEvent.ts","webpack://telegram-t/./src/util/trapFocus.ts"],"sourcesContent":["import type { FormEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { fallbackLangPackInitial as langPack } from '../../util/fallbackLangPackInitial';\nimport { pick } from '../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport TrackingMonkey from '../common/TrackingMonkey';\nimport InputText from '../ui/InputText';\n\ntype StateProps = Pick<GlobalState, 'authPhoneNumber' | 'authIsCodeViaApp' | 'authIsLoading' | 'authError'>;\n\nconst CODE_LENGTH = 5;\n\nconst AuthCode: FC<StateProps> = ({\n  authPhoneNumber,\n  // authIsCodeViaApp,\n  authIsLoading,\n  authError,\n}) => {\n  const {\n    setAuthCode,\n    returnToAuthPhoneNumber,\n    clearAuthError,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [code, setCode] = useState<string>('');\n  const [isTracking, setIsTracking] = useState(false);\n  // const [trackingDirection, setTrackingDirection] = useState(1);\n  const currentViewportHeight = useRef<number>(Number(window.visualViewport!.height));\n  const isFocused = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n\n    /**\n     * TL - Use trick to make button always above keyboard\n     * Description:\n     *   - First, prevent input from being scroll to the center of the screen\n     *   - Second, caculate x value. It calculates by substract clientHeight and viewHeight\n     *   - Third, translate view up by x pixels.\n     */\n    inputRef.current!.addEventListener('focusin', () => {\n      if (!isFocused.current) {\n        inputRef.current!.style.transform = 'TranslateY(-10000px)';\n        inputRef.current!.style.caretColor = 'transparent';\n        setTimeout(() => {\n          inputRef.current!.style.transform = 'none';\n          const scrollPixel = containerRef.current!.clientHeight\n            - currentViewportHeight.current + ((window as any).numberKeyboardHeight ?? 0) / 1.15 + 10;\n\n          if (scrollPixel > 0) {\n            containerRef.current!.style.transform = `translateY(${-scrollPixel}px)`;\n            containerRef.current!.style.transition = 'transform 0.2s linear';\n          }\n          setTimeout(() => {\n            inputRef.current!.style.caretColor = '#8774E1';\n          }, 180);\n        }, 80);\n        isFocused.current = true;\n      }\n    });\n\n    inputRef.current!.addEventListener('blur', () => {\n      isFocused.current = false;\n      containerRef.current!.style.transform = 'translateY(0)';\n      containerRef.current!.style.transition = 'transform 0.2s linear';\n    });\n  }, []);\n\n  useHistoryBack({\n    isActive: true,\n    onBack: returnToAuthPhoneNumber,\n  });\n\n  const onCodeChange = useCallback((e: FormEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { currentTarget: target } = e;\n    target.value = target.value.replace(/[^\\d]+/, '').substr(0, CODE_LENGTH);\n\n    if (target.value === code) {\n      return;\n    }\n\n    setCode(target.value);\n\n    if (!isTracking) {\n      setIsTracking(true);\n    } else if (!target.value.length) {\n      setIsTracking(false);\n    }\n\n    if (target.value.length === CODE_LENGTH) {\n      setAuthCode({ code: target.value });\n    }\n  }, [authError, clearAuthError, code, isTracking, setAuthCode]);\n\n  function handleReturnToAuthPhoneNumber() {\n    returnToAuthPhoneNumber();\n  }\n\n  const paddingTop = (window as any).tlPaddingTop - 88 > 0 ? (window as any).tlPaddingTop - 88 : 0;\n\n  return (\n    <div className=\"custom-wrapper\" style={`padding-top: ${paddingTop}px`}>\n      <div ref={containerRef} className=\"auth-form\">\n        <div id=\"logo\" />\n        <h1 className=\"flex center\">\n          {authPhoneNumber}\n          <div\n            className=\"auth-number-edit div-button\"\n            onClick={handleReturnToAuthPhoneNumber}\n            role=\"button\"\n            tabIndex={0}\n            title={lang('WrongNumber')}\n          >\n            <i className=\"icon icon-edit\" />\n          </div>\n        </h1>\n        <p className=\"note\">\n          {langPack.SentAppCode1 as string} <br /> {langPack.SentAppCode2 as string}\n        </p>\n        <div className=\"label\">\n          {langPack.EnterCode as string}\n        </div>\n        <InputText\n          ref={inputRef}\n          className=\"custom-input noMarginBottom\"\n          id=\"sign-in-code\"\n          placeholder={lang('5 digit verification code')}\n          onInput={onCodeChange}\n          value={code}\n          error={authError && lang(authError)}\n          autoComplete=\"off\"\n          inputMode=\"numeric\"\n          onLoading={authIsLoading}\n          loadingSize=\"medium\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authPhoneNumber', 'authIsCodeViaApp', 'authIsLoading', 'authError']),\n)(AuthCode));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport MonkeyPassword from '../common/PasswordMonkey';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError' | 'authHint'>;\n\nconst AuthPassword: FC<StateProps> = ({\n  authIsLoading, authError, authHint,\n}) => {\n  const { setAuthPassword, clearAuthError } = getActions();\n\n  const lang = useLang();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChangePasswordVisibility = useCallback((isVisible) => {\n    setShowPassword(isVisible);\n  }, []);\n\n  const handleSubmit = useCallback((password: string) => {\n    setAuthPassword({ password });\n  }, [setAuthPassword]);\n\n  return (\n    <div id=\"auth-password-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <MonkeyPassword isPasswordVisible={showPassword} />\n        <h1>{lang('Login.Header.Password')}</h1>\n        <p className=\"note\">{lang('Login.EnterPasswordDescription')}</p>\n        <PasswordForm\n          clearError={clearAuthError}\n          error={authError && lang(authError)}\n          hint={authHint}\n          isLoading={authIsLoading}\n          isPasswordVisible={showPassword}\n          onChangePasswordVisibility={handleChangePasswordVisibility}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError', 'authHint']),\n)(AuthPassword));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport useLang from '../../hooks/useLang';\n\nimport AvatarEditable from '../ui/AvatarEditable';\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError'>;\n\nconst AuthRegister: FC<StateProps> = ({\n  authIsLoading, authError,\n}) => {\n  const { signUp, clearAuthError, uploadProfilePhoto } = getActions();\n\n  const lang = useLang();\n  const [isButtonShown, setIsButtonShown] = useState(false);\n  const [croppedFile, setCroppedFile] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const handleFirstNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { target } = event;\n\n    setFirstName(target.value);\n    setIsButtonShown(target.value.length > 0);\n  }, [authError, clearAuthError]);\n\n  const handleLastNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setLastName(target.value);\n  }, []);\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    signUp({ firstName, lastName });\n\n    if (croppedFile) {\n      uploadProfilePhoto({ file: croppedFile });\n    }\n  }\n\n  return (\n    <div id=\"auth-registration-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <form action=\"\" method=\"post\" onSubmit={handleSubmit}>\n          <AvatarEditable onChange={setCroppedFile} />\n          <h2>{lang('YourName')}</h2>\n          <p className=\"note\">{lang('Login.Register.Desc')}</p>\n          <InputText\n            id=\"registration-first-name\"\n            label={lang('Login.Register.FirstName.Placeholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={authError && lang(authError)}\n            autoComplete=\"given-name\"\n          />\n          <InputText\n            id=\"registration-last-name\"\n            label={lang('Login.Register.LastName.Placeholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n            autoComplete=\"family-name\"\n          />\n          {isButtonShown && (\n            <Button type=\"submit\" ripple isLoading={authIsLoading}>{lang('Next')}</Button>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError']),\n)(AuthRegister));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  description?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  shouldShowSubmit?: boolean;\n  shouldResetValue?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  noRipple?: boolean;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit?: (password: string) => void;\n};\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  description,\n  shouldShowSubmit,\n  shouldResetValue,\n  shouldDisablePasswordManager = false,\n  noRipple = false,\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  useEffect(() => {\n    if (shouldResetValue) {\n      setPassword('');\n    }\n  }, [shouldResetValue]);\n\n  useTimeout(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, focusDelayTimeoutMs);\n\n  useEffect(() => {\n    if (error) {\n      requestMutation(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit!(password);\n    }\n  }\n\n  function renderFakeInput() {\n    return (\n      <input\n        type=\"password\"\n        id=\"prevent_autofill\"\n        autoComplete=\"off\"\n        className=\"visually-hidden\"\n        tabIndex={-2}\n      />\n    );\n  }\n\n  return (\n    <form action=\"\" onSubmit={onSubmit ? handleSubmit : stopEvent} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldDisablePasswordManager && renderFakeInput()}\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete={shouldDisablePasswordManager ? 'one-time-code' : 'current-password'}\n          onChange={onPasswordChange}\n          maxLength={256}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"div-button toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={buildClassName('icon', isPasswordVisible ? 'icon-eye' : 'icon-eye-closed')} />\n        </div>\n      </div>\n      {description && <p className=\"description\">{description}</p>}\n      {onSubmit && (canSubmit || shouldShowSubmit) && (\n        <Button type=\"submit\" ripple={!noRipple} isLoading={isLoading} disabled={!canSubmit}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { useLayoutEffect, useRef } from '../lib/teact/teact';\n\nconst useLayoutEffectWithPrevDeps = <const T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDepsRef = useRef<T>();\n\n  return useLayoutEffect(() => {\n    const prevDeps = prevDepsRef.current;\n    prevDepsRef.current = dependencies;\n\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import { useEffect } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nfunction useTimeout(callback: () => void, delay?: number, dependencies: readonly any[] = []) {\n  const savedCallback = useLastCallback(callback);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') {\n      return undefined;\n    }\n\n    const id = setTimeout(() => savedCallback(), delay);\n    return () => clearTimeout(id);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [delay, savedCallback, ...dependencies]);\n}\n\nexport default useTimeout;\n","type HandlerName =\n  'onEnter'\n  | 'onBackspace'\n  | 'onDelete'\n  | 'onEsc'\n  | 'onUp'\n  | 'onDown'\n  | 'onLeft'\n  | 'onRight'\n  | 'onTab';\ntype Handler = (e: KeyboardEvent) => void | boolean;\ntype CaptureOptions = Partial<Record<HandlerName, Handler>>;\n\nconst keyToHandlerName: Record<string, HandlerName> = {\n  Enter: 'onEnter',\n  Backspace: 'onBackspace',\n  Delete: 'onDelete',\n  Esc: 'onEsc',\n  Escape: 'onEsc',\n  ArrowUp: 'onUp',\n  ArrowDown: 'onDown',\n  ArrowLeft: 'onLeft',\n  ArrowRight: 'onRight',\n  Tab: 'onTab',\n};\n\nconst handlers: Record<HandlerName, Handler[]> = {\n  onEnter: [],\n  onDelete: [],\n  onBackspace: [],\n  onEsc: [],\n  onUp: [],\n  onDown: [],\n  onLeft: [],\n  onRight: [],\n  onTab: [],\n};\n\nexport default function captureKeyboardListeners(options: CaptureOptions) {\n  if (!hasActiveHandlers()) {\n    document.addEventListener('keydown', handleKeyDown, true);\n  }\n\n  (Object.keys(options) as Array<HandlerName>).forEach((handlerName) => {\n    const handler = options[handlerName];\n    if (!handler) {\n      return;\n    }\n\n    const currentEventHandlers = handlers[handlerName];\n    if (currentEventHandlers) {\n      currentEventHandlers.push(handler);\n    }\n  });\n\n  return () => {\n    releaseKeyboardListener(options);\n  };\n}\n\nfunction hasActiveHandlers() {\n  return Object.values(handlers).some((keyHandlers) => Boolean(keyHandlers.length));\n}\n\nfunction handleKeyDown(e: KeyboardEvent) {\n  const handlerName = keyToHandlerName[e.key];\n  if (!handlerName) {\n    return;\n  }\n\n  const { length } = handlers[handlerName];\n  if (!length) {\n    return;\n  }\n\n  for (let i = length - 1; i >= 0; i--) {\n    const handler = handlers[handlerName][i]!;\n    if (handler(e) !== false) {\n      e.stopPropagation();\n      break;\n    }\n  }\n}\n\nfunction releaseKeyboardListener(options: CaptureOptions) {\n  (Object.keys(options) as Array<HandlerName>).forEach((handlerName) => {\n    const handler = options[handlerName];\n    const currentEventHandlers = handlers[handlerName];\n    if (currentEventHandlers) {\n      const index = currentEventHandlers.findIndex((cb) => cb === handler);\n      if (index !== -1) {\n        currentEventHandlers.splice(index, 1);\n      }\n    }\n  });\n\n  if (!hasActiveHandlers()) {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  }\n}\n","let counter = 0;\n\nexport function disableDirectTextInput() {\n  counter += 1;\n}\n\nexport function enableDirectTextInput() {\n  counter -= 1;\n}\n\nexport function getIsDirectTextInputDisabled() {\n  return counter > 0;\n}\n","import { type FC, type Props, useRef } from '../../lib/teact/teact';\n\nexport default function freezeWhenClosed<T extends FC>(Component: T) {\n  function ComponentWrapper(props: Props) {\n    const newProps = useRef(props);\n\n    if (props.isOpen) {\n      newProps.current = props;\n    } else {\n      newProps.current = {\n        ...newProps.current,\n        isOpen: false,\n      };\n    }\n\n    return Component(newProps.current);\n  }\n\n  return ComponentWrapper as T;\n}\n","import type React from '../lib/teact/teact';\n\nconst stopEvent = (e: React.UIEvent | Event | React.FormEvent) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nexport default stopEvent;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n"],"names":["memo","withGlobal","global","pick","_ref","authPhoneNumber","authIsLoading","authError","setAuthCode","returnToAuthPhoneNumber","clearAuthError","getActions","lang","useLang","inputRef","useRef","containerRef","code","setCode","useState","isTracking","setIsTracking","currentViewportHeight","Number","window","visualViewport","height","isFocused","useEffect","IS_TOUCH_ENV","current","focus","addEventListener","style","transform","caretColor","setTimeout","scrollPixel","clientHeight","numberKeyboardHeight","transition","useHistoryBack","isActive","onBack","onCodeChange","useCallback","e","currentTarget","target","value","replace","substr","length","paddingTop","tlPaddingTop","React","createElement","className","ref","id","onClick","role","tabIndex","title","langPack","SentAppCode1","SentAppCode2","EnterCode","InputText","placeholder","onInput","error","autoComplete","inputMode","onLoading","loadingSize","authHint","setAuthPassword","showPassword","setShowPassword","handleChangePasswordVisibility","isVisible","handleSubmit","password","MonkeyPassword","isPasswordVisible","PasswordForm","clearError","hint","isLoading","onChangePasswordVisibility","onSubmit","signUp","uploadProfilePhoto","isButtonShown","setIsButtonShown","croppedFile","setCroppedFile","firstName","setFirstName","lastName","setLastName","handleFirstNameChange","event","handleLastNameChange","action","method","preventDefault","file","AvatarEditable","onChange","label","Button","type","ripple","submitLabel","description","shouldShowSubmit","shouldResetValue","shouldDisablePasswordManager","noRipple","onInputChange","isMobile","useAppLayout","setPassword","canSubmit","setCanSubmit","focusDelayTimeoutMs","useTimeout","requestMutation","select","stopEvent","buildClassName","dir","isRtl","undefined","MIN_PASSWORD_LENGTH","maxLength","disabled","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","useLayoutEffectWithPrevDeps","cb","dependencies","debugKey","prevDepsRef","useLayoutEffect","prevDeps","callback","delay","arguments","savedCallback","useLastCallback","clearTimeout","keyToHandlerName","Enter","Backspace","Delete","Esc","Escape","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Tab","handlers","onEnter","onDelete","onBackspace","onEsc","onUp","onDown","onLeft","onRight","onTab","captureKeyboardListeners","options","hasActiveHandlers","document","handleKeyDown","Object","keys","forEach","handlerName","handler","currentEventHandlers","push","index","findIndex","splice","removeEventListener","releaseKeyboardListener","values","some","keyHandlers","Boolean","key","i","stopPropagation","counter","disableDirectTextInput","enableDirectTextInput","getIsDirectTextInputDisabled","freezeWhenClosed","Component","props","newProps","isOpen","trapFocus","element","focusableElements","Array","from","querySelectorAll","currentFocusedIndex","em","isSameNode","activeElement","newFocusedIndex","shiftKey"],"sourceRoot":""}