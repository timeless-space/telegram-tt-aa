{"version":3,"file":"5769.c267919e111c8cdb59c9.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectSendAs,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectTranslationLanguage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  if (!messageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = messageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: messageList.threadId,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  replyingToTopId?: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (!params.replyingTo && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedMessageTranslationLanguage,\n  selectPinnedIds,\n  selectRequestedChatTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from '../config';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\nimport { sendPushNotification } from '../../../util/tlCustomFunction';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { ...notification } = payload;\n  sendPushNotification(notification.message);\n  // const { tabId = getCurrentTabId(), ...notification } = payload;\n  // notification.localId = generateUniqueId();\n\n  // const newNotifications = [...selectTabState(global, tabId).notifications];\n  // const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  // if (existingNotificationIndex !== -1) {\n  //   newNotifications.splice(existingNotificationIndex, 1);\n  // }\n\n  // newNotifications.push(notification as ApiNotification);\n\n  // return updateTabState(global, {\n  //   notifications: newNotifications,\n  // }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport useLastCallback from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  // ANIMATION_LEVEL_MAX,\n  // ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  // BETA_CHANGELOG_URL,\n  DEBUG,\n  // FEEDBACK_URL,\n  IS_BETA,\n  IS_ELECTRON,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_APP, IS_MAC_OS } from '../../../util/windowEnvironment';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\n// import { setPermanentWebVersion } from '../../../util/permanentWebVersion';\n// import { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n// import { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n// import Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n// import Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\nimport { sendScreenName } from '../../../util/tlCustomFunction';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  // shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  // animationLevel,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  // canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    // skipLockOnUnload,\n    // openUrl,\n    // updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  // const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon no-animation state-back',\n          // !hasMenu && 'state-back',\n          // shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  // const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n  //   // No action in here/ default dark mode\n  //   e.stopPropagation();\n  //   const newTheme = theme === 'light' ? 'dark' : 'light';\n  //   setSettingOption({ theme: newTheme });\n  //   setSettingOption({ shouldUseSystemTheme: false });\n  // });\n\n  // const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n  //   e.stopPropagation();\n\n  //   let newLevel = animationLevel + 1;\n  //   if (newLevel > ANIMATION_LEVEL_MAX) {\n  //     newLevel = ANIMATION_LEVEL_MIN;\n  //   }\n  //   const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n  //     ? INITIAL_PERFORMANCE_STATE_MIN\n  //     : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n  //   setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  //   updatePerformanceSettings(performanceSettings);\n  // }, [animationLevel, setSettingOption]);\n\n  // const handleChangelogClick = useCallback(() => {\n  //   window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  // }, []);\n\n  // const handleSwitchToWebK = useCallback(() => {\n  //   setPermanentWebVersion('K');\n  //   clearWebsync();\n  //   skipLockOnUnload();\n  // });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  // const handleBugReportClick = useLastCallback(() => {\n  //   openUrl({ url: FEEDBACK_URL });\n  // });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  useEffect(() => {\n    if (isSearchFocused) {\n      sendScreenName('tl_navigation_mainScreen');\n    }\n  }, [isSearchFocused]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  // const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n  //   ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n  //   : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      {/* <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem> */}\n      {/* <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem> */}\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      {/* <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem> */}\n      {/* {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )} */}\n      {/* {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )} */}\n      {/* {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )} */}\n    </>\n  ), [\n    archivedUnreadChatsCount, lang, handleOpenTipsChat, handleSelectSaved,\n    onSelectArchived, onSelectContacts, onSelectSettings, archiveSettings,\n  ]);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n            /**\n             * TL - Trigger hide hamburger menu when search input focused in\n             */\n            isSearchFocused ? 'custom-dropdown-invisible' : 'custom-dropdown-visible',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {/* {menuItems} */}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n            'custom-style',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'gray' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { handleScrollUnactiveTab } from '../../../util/tlCustomFunction';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    handleScrollUnactiveTab();\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (() => {\n        // if (direction === SwipeDirection.Left) {\n        //   setActiveChatFolder(\n        //     { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n        //     { forceOnHeavyAnimation: true },\n        //   );\n        //   return true;\n        // } else if (direction === SwipeDirection.Right) {\n        //   setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n        //   return true;\n        // }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        allowAbsoluteHeader\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        className={!isMenuOpen ? 'custom-translate-self' : ''}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {\n        /**\n         * TL - Fix header issue when ChatList screen is rendered\n         */\n      }\n      <div id=\"left-main-header\" className={`${content === LeftColumnContent.ChatList ? 'fix-issue' : ''}`}>\n        <LeftMainHeader\n          shouldHideSearch={isForumPanelVisible}\n          content={content}\n          contactsFilter={contactsFilter}\n          onSearchQuery={onSearchQuery}\n          onSelectSettings={handleSelectSettings}\n          onSelectContacts={handleSelectContacts}\n          onSelectArchived={handleSelectArchived}\n          onReset={onReset}\n          shouldSkipTransition={shouldSkipTransition}\n          isClosingSearch={isClosingSearch}\n        />\n      </div>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_APP, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      sendScreenName('tl_navigation_otherScreen');\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      sendScreenName('tl_navigation_otherScreen');\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      sendScreenName('tl_navigation_otherScreen');\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  useEffect(() => {\n    if (settingsScreen === SettingsScreens.Main && contentType === ContentType.Main) {\n      sendScreenName('tl_navigation_mainScreen');\n    } else {\n      sendScreenName('tl_navigation_otherScreen');\n    }\n  }, [settingsScreen, contentType]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      if (content === LeftColumnContent.NewGroupStep1 || content === LeftColumnContent.NewChannelStep1) {\n        sendScreenName('tl_navigation_mainScreen');\n      }\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      className=\"tl-custom-padding\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n        if (!getGlobal().isArchivePrevious) {\n          sendScreenName('tl_navigation_mainScreen');\n        }\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst SMALL_IMAGE_THRESHOLD = 12;\nconst MIN_MESSAGE_LENGTH_FOR_BLUR = 40;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 20 * REM;\nconst MIN_MEDIA_WIDTH = SMALL_IMAGE_THRESHOLD * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\n\nexport function getMinMediaWidth(text?: string, hasCommentButton?: boolean) {\n  return (text?.length ?? 0) > MIN_MESSAGE_LENGTH_FOR_BLUR || hasCommentButton\n    ? MIN_MEDIA_WIDTH_WITH_TEXT\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const messageText = getMessageText(message);\n  const minMediaWidth = getMinMediaWidth(messageText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport type { Signal } from '../../../../util/signals';\n\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\nimport { throttle } from '../../../../util/schedulers';\n\nconst MESSAGE_LIMIT_PER_REQUEST = 20;\nconst THROTTLE_DELAY = 500;\nconst PENDING_TRANSLATIONS = new Map<string, Map<string, number[]>>();\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId?: string,\n  messageId?: number,\n  requestedLanguageCode?: string,\n) {\n  const messageTranslation = requestedLanguageCode && messageId\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!chatId || !messageId) return;\n\n    if (!text && isPending === undefined && requestedLanguageCode) {\n      addPendingTranslation(chatId, messageId, requestedLanguageCode);\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode]);\n\n  if (!chatId || !messageId) {\n    return {\n      isPending: false,\n      translatedText: undefined,\n    };\n  }\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n\nconst throttledProcessPending = throttle(processPending, THROTTLE_DELAY);\n\nfunction processPending() {\n  const { translateMessages } = getActions();\n  let hasUnprocessed = false;\n  PENDING_TRANSLATIONS.forEach((chats, toLanguageCode) => {\n    chats.forEach((messageIds, chatId) => {\n      const messageIdsToTranslate = messageIds.slice(0, MESSAGE_LIMIT_PER_REQUEST);\n\n      if (messageIdsToTranslate.length < messageIds.length) {\n        hasUnprocessed = true;\n      }\n\n      translateMessages({ chatId, messageIds: messageIdsToTranslate, toLanguageCode });\n\n      removePendingTranslations(chatId, messageIdsToTranslate, toLanguageCode);\n    });\n  });\n\n  if (hasUnprocessed) {\n    throttledProcessPending();\n  }\n}\n\nfunction addPendingTranslation(\n  chatId: string,\n  messageId: number,\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode) || new Map<string, number[]>();\n  const messageIds = languageTranslations.get(chatId) || [];\n\n  if (messageIds.includes(messageId)) {\n    throttledProcessPending();\n    return;\n  }\n\n  messageIds.push(messageId);\n  languageTranslations.set(chatId, messageIds);\n  PENDING_TRANSLATIONS.set(toLanguageCode, languageTranslations);\n\n  getActions().markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  throttledProcessPending();\n}\n\nfunction removePendingTranslations(\n  chatId: string,\n  messageIds: number[],\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode);\n  if (!languageTranslations?.size) {\n    PENDING_TRANSLATIONS.delete(toLanguageCode);\n    return;\n  }\n\n  const oldMessageIds = languageTranslations.get(chatId);\n  if (!oldMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    return;\n  }\n\n  const newMessageIds = oldMessageIds.filter((id) => !messageIds.includes(id));\n\n  if (!newMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    if (!languageTranslations.size) {\n      PENDING_TRANSLATIONS.delete(toLanguageCode);\n    }\n    return;\n  }\n\n  languageTranslations.set(chatId, newMessageIds);\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\nimport { useEffect } from '../../../../lib/teact/teact';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default ContextMenuContainerAsync;\n","import React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTopic, ApiUser,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectTabState,\n  selectTopicFromMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  }, [\n    isEmbedded, lang, message, observeIntersectionForLoading, observeIntersectionForPlaying,\n    senderChat, senderUser, targetChatId, targetMessage, targetUsers, topic,\n  ]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import React, { useRef } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\nimport type { ChatTranslatedMessages } from '../../global/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n  isMessageTranslatable,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useMessageTranslation from '../middle/message/hooks/useMessageTranslation';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  requestedChatTranslationLanguage?: string;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  chatTranslations,\n  requestedChatTranslationLanguage,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const shouldTranslate = message && isMessageTranslatable(message);\n  const { translatedText } = useMessageTranslation(\n    chatTranslations, message?.chatId, shouldTranslate ? message?.id : undefined, requestedChatTranslationLanguage,\n  );\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              translatedText={translatedText}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport { IS_ELECTRON } from '../../../config';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'),\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { LangFn } from '../../../hooks/useLang';\nimport type {\n  ApiMessage, ApiPoll, ApiPollAnswer, ApiChat, ApiUser,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleQuickButtonClick = useLastCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport type {\n  ActiveEmojiInteraction,\n  ActiveReaction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiUser,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport { AudioOrigin } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport type { Signal } from '../../../util/signals';\n\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n    getIsMessageListReady: Signal<boolean>;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n  isConnected: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  isConnected,\n  onPinnedIntersectionChange,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item allow-selection',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    activeReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      isConnected,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openChatLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiBotInfo } from '../../api/types';\n\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport buildStyle from '../../util/buildStyle';\nimport buildClassName from '../../util/buildClassName';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback((selectedSticker: ApiSticker) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker, messageList: currentMessageList });\n  });\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  isLocalMessageId,\n  getMessageHtmlId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport MessageListBotInfo from './MessageListBotInfo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_THUMB_IMG_SIZE = 40; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    const shouldShrinkPreview = Math.max(width, height) > MAX_THUMB_IMG_SIZE;\n    if (shouldShrinkPreview) {\n      previewBlobUrl = await scaleImage(\n        blobUrl, MAX_THUMB_IMG_SIZE / Math.max(width, height), 'image/jpeg',\n      );\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { StateHookSetter } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\nconst TYPE_HTML = 'text/html';\nconst DOCUMENT_TYPE_WORD = 'urn:schemas-microsoft-com:office:word';\nconst NAMESPACE_PREFIX_WORD = 'xmlns:w';\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  setNextText: StateHookSetter<ApiFormattedText | undefined>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      let isWordDocument = false;\n      try {\n        const parser = new DOMParser();\n        const parsedDocument = parser.parseFromString(html, TYPE_HTML);\n        isWordDocument = parsedDocument.documentElement\n          .getAttribute(NAMESPACE_PREFIX_WORD) === DOCUMENT_TYPE_WORD;\n      } catch (err: any) {\n        // Ignore\n      }\n\n      const hasText = textToPaste && textToPaste.text;\n      const shouldSetAttachments = files?.length && !editedMessage && !isWordDocument;\n\n      if (shouldSetAttachments) {\n        const newAttachments = await Promise.all(files!.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (hasText) {\n        if (shouldSetAttachments) {\n          setNextText(textToPaste);\n        } else {\n          insertTextAndUpdateCursor(textToPaste, input?.id);\n        }\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n    setNextText,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n  insertNextText,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n  insertNextText: VoidFunction;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n    insertNextText();\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  });\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  });\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useLastCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  });\n\n  const handleCloseMenu = useLastCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  });\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    setMenuPosition(undefined);\n  });\n\n  const handleRemoveBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  });\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, DEBUG_LOG_FILENAME, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\nimport { getDebugLogs } from '../../../util/debugConsole';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  isChatWithBot: boolean;\n  peerType?: ApiAttachMenuPeerType;\n  shouldCollectDebugLogs?: boolean;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  handleSendCrypto: () => void;\n  handleCreatePOAP: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  isChatWithBot,\n  onFileSelect,\n  onPollCreate,\n  handleSendCrypto,\n  handleCreatePOAP,\n  theme,\n  shouldCollectDebugLogs,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useLastCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  });\n\n  const handleFileSelect = useLastCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  });\n\n  const handleQuickSelect = useLastCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  });\n\n  const handleSendLogs = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    onFileSelect([file]);\n  });\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className={isAttachMenuOpen || isAttachmentBotMenuOpen ? 'AttachMenu--menu fluid' : 'AttachMenuHidden'}\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {/* {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )} */}\n            {canSendDocuments && shouldCollectDebugLogs && (\n              <MenuItem icon=\"bug\" onClick={handleSendLogs}>\n                {lang('DebugSendLogs')}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n        {/**\n           * TL - Add send crypto button to attachments\n           * Description: Only chat 1-1 (except with bot and self) or group has this button\n           */}\n        {!isChatWithBot && Number(chatId) >= 0 && (\n          <MenuItem\n            icon=\"lock\"\n            className=\"margin-left-1px\"\n            customIcon={(\n              <img className=\"icon\" src=\"./wallet_20px.svg\" alt=\"\" />\n            )}\n            onClick={handleSendCrypto}\n          >\n            {lang('Send Crypto')}\n          </MenuItem>\n        )}\n        {/**\n         * TL - Add create POAP button to attachments\n         */}\n        {!isChatWithBot && Number(chatId) >= 0 && (\n          <MenuItem\n            icon=\"lock\"\n            className=\"margin-left-1px\"\n            customIcon={(\n              <img className=\"icon\" src=\"./camera_macro.svg\" alt=\"\" />\n            )}\n            onClick={handleCreatePOAP}\n          >\n            {lang('Create POAP')}\n          </MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default InlineBotTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default MentionTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default BotCommandTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useLastCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useLastCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  });\n\n  const handleChangeRecipientClick = useLastCallback(() => {\n    changeForwardRecipient();\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  useEffect(() => {\n    if (!shouldRender) handleContextMenuClose();\n  }, [handleContextMenuClose, shouldRender]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default AttachmentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default BotCommandMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default PollModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default DropAreaAsync;\nexport { DropAreaState } from './DropArea';\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiFormattedText, ApiMessage, ApiMessageEntityTextUrl, ApiWebPage,\n} from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseMessageInput(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default SendAsMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft, MessageList,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n    shouldCollectDebugLogs?: boolean;\n  };\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n\nlet interval: any;\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n  shouldCollectDebugLogs,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n    sendDefaultReaction,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(() => {\n    const clearIntervalFn = () => {\n      clearInterval(interval);\n    };\n    window.addEventListener('cleanup-interval', clearIntervalFn);\n\n    return () => {\n      window.removeEventListener('cleanup-interval', clearIntervalFn);\n    };\n  }, []);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, cancelForceShowSymbolMenu);\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n  const [nextText, setNextText] = useState<ApiFormattedText | undefined>(undefined);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const insertHtmlAndUpdateCursor = useLastCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  });\n\n  const insertNextText = useLastCallback(() => {\n    if (!nextText) return;\n    insertFormattedTextAndUpdateCursor(nextText, EDITABLE_INPUT_ID);\n    setNextText(undefined);\n  });\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n    insertNextText,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage);\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n    setNextText(undefined);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    setNextText,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      messageList: currentMessageList,\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetOrder,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  });\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n        messageList,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n      });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt, currentMessageList);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n        messageList: currentMessageList,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt, currentMessageList);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ messageList: currentMessageList, poll });\n      closePollModal();\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        inputRef.current?.blur();\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        if (!currentMessageList) {\n          return;\n        }\n\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt, currentMessageList!);\n        });\n        break;\n      default:\n        break;\n    }\n  });\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n  );\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendSilent();\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleMessageSchedule({}, SCHEDULED_WHEN_ONLINE, currentMessageList!);\n  });\n\n  const handleSendScheduledAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilentAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  });\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  /**\n   * TL - Send a post message to Timeless Wallet\n   * Description: The data is an object with 2 properties: chatId and threadId\n   */\n  const handleSendCrypto = useCallback(() => {\n    (window as any).webkit?.messageHandlers?.sendCrypto.postMessage({\n      chatId,\n    });\n  }, [chatId]);\n\n  const handleGetLastMessageId = useCallback(() => {\n    return getGlobal().chats.byId[chatId].lastMessage?.id;\n  }, [chatId]);\n\n  /**\n   * TL - Create POAP function\n   */\n  const handleCreatePOAP = () => {\n    (window as any).webkit?.messageHandlers?.createPOAP.postMessage({\n      chatId,\n    });\n\n    const currentMessageId = handleGetLastMessageId();\n    if (currentMessageId) {\n      interval = setInterval(() => {\n        const messageId = handleGetLastMessageId();\n        if (currentMessageId !== messageId && messageId) {\n          sendDefaultReaction({ chatId, messageId });\n          window.dispatchEvent(new Event('cleanup-interval'));\n        }\n      }, 5000);\n    }\n  };\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <svg className=\"svg-appendix\" width=\"9\" height=\"20\">\n          <defs>\n            <filter\n              x=\"-50%\"\n              y=\"-14.7%\"\n              width=\"200%\"\n              height=\"141.2%\"\n              filterUnits=\"objectBoundingBox\"\n              id=\"composerAppendix\"\n            >\n              <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n              <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n              <feColorMatrix\n                values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n                in=\"shadowBlurOuter1\"\n              />\n            </filter>\n          </defs>\n          <g fill=\"none\" fill-rule=\"evenodd\">\n            <path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#composerAppendix)\" />\n            <path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" className=\"corner\" />\n          </g>\n        </svg>\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                peer={sendAsUser || sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            isChatWithBot={(isChatWithBot || isChatWithSelf) ?? false}\n            handleSendCrypto={handleSendCrypto}\n            handleCreatePOAP={handleCreatePOAP}\n            shouldCollectDebugLogs={shouldCollectDebugLogs}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const {\n      language, shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder,\n    } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n    };\n  },\n)(Composer));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  tempInput.className = 'allow-selection'; // Patch for Safari\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport ChatLanguageModal from './ChatLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  /**\n   * TL - Send a post message to Timeless Wallet\n   * Description: The data is an object with 2 properties: chatId and threadId\n   */\n  const handleSendCrypto = () => {\n    (window as any).sendCrypto?.postMessage(JSON.stringify({\n      chatId,\n      threadId,\n    }));\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {\n                /**\n                 * TL - Custom send crypto button\n                 */\n                !isBot && Number(chatId) >= 0 && (\n                  <Button\n                    round\n                    color=\"translucent\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Send Crypto')}\n                    onClick={handleSendCrypto}\n                  >\n                    <img src=\"./wallet_24px.svg\" alt=\"\" />\n                  </Button>\n                )\n              }\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import React, {\n  useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useEffect(() => {\n    if (isMobile) {\n      if ((!isLeftColumnOpen && !isRightColumnOpen) || isRightColumnOpen) {\n        sendScreenName('tl_navigation_otherScreen');\n      }\n    }\n  }, [isMobile, isLeftColumnOpen, isMiddleColumnOpen, isRightColumnOpen]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron!.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","shouldForce","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","activeReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","isChatInfoShown","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","sendPushNotification","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","newNotifications","notifications","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","splice","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","then","trim","test","isUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","StickerSetModal","useModuleLoader","Bundles","Extra","React","createElement","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isFetchingDifference","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","hasMenu","LeftColumnContent","ChatList","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleOpenTipsChat","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","captureEscKeyListener","sendScreenName","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","Fragment","MenuItem","icon","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","positionX","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","handleScrollUnactiveTab","captureEvents","selectorToPreventScroll","onSwipe","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","folderType","canDisplayArchive","allowAbsoluteHeader","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","menuItems","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","shouldSkipTransition","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","label","checked","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","isArchivePrevious","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","senderUserId","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","SMALL_IMAGE_THRESHOLD","MIN_MESSAGE_LENGTH_FOR_BLUR","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","getMinMediaWidth","hasCommentButton","_text$length","calculateMediaDimensions","asForwarded","noAvatars","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","SwipeDirection","onRelease","preventMessageInputBlur","target","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","PENDING_TRANSLATIONS","useMessageTranslation","chatTranslations","requestedLanguageCode","messageTranslation","byLangCode","languageTranslations","throttledProcessPending","addPendingTranslation","translatedText","translateMessages","hasUnprocessed","messageIdsToTranslate","oldMessageIds","newMessageIds","removePendingTranslations","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","SuggestedAvatar","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","requestedChatTranslationLanguage","isIntersecting","isRoundVideo","getMessageRoundVideo","shouldTranslate","isMessageTranslatable","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","strokeDashOffset","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","cx","cy","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","buy","lock","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","PinSvg","viewBox","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","timeLeft","formatCountdownShort","textContent","long","prepareMapUrl","pinClassName","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","animating","ReactionStaticEmoji","animatedIcon","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","filterUnits","dy","in","stdDeviation","fill","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","selectChatTranslations","requestedTranslationLanguage","areTranslationsEnabled","canTranslate","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","contextMenuTarget","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","isTranslatingChat","openAudioPlayer","sendPollVote","focusMessageInComments","openChatLanguageModal","channelPostId","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","isTranslationPending","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","MAX_ASPECT_RATIO","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","appendChild","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","source","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","setNextText","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","MentionName","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","textToPaste","isWordDocument","documentElement","shouldSetAttachments","newAttachments","URL_ENTITIES","TextUrl","Url","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","Text","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","handleSendCrypto","handleCreatePOAP","shouldCollectDebugLogs","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleSendLogs","getDebugLogs","DEBUG_LOG_FILENAME","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","interval","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","inputRef","setHtml","isMounted","setIsMounted","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","clearIntervalFn","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","nextText","canSendGifs","canAttachEmbedLinks","isComposerBlocked","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","insertNextText","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","shouldPreserveInput","canUpdateStickerSetsOrder","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","webkit","messageHandlers","sendCrypto","postMessage","handleGetLastMessageId","DropAreaState","withQuick","QuickFile","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","createPOAP","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","ChatLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","n","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","forceSyncOnIOs","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","Calls","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","removeUpdateDownloadedListener","on","ElectronEvent","UPDATE_DOWNLOADED","removeUpdateErrorListener","UPDATE_ERROR","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}