{"version":3,"file":"5769.4fab7481a4be27d76e49.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draftReplyInfo = !isStoryReply ? selectDraft(global, chatId!, threadId!)?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  if (!isStoryReply) {\n    actions.resetDraftReplyInfo({ tabId });\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft(global, chatId, threadId, newDraft);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  if (!isLocalOnly) {\n    saveDraft(global, chatId, threadId, newDraft);\n  }\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft(global, chatId, threadId, newDraft);\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft(global, chatId, threadId, newDraft);\n});\n\nasync function saveDraft<T extends GlobalState>(global: T, chatId: string, threadId: number, draft?: ApiDraft) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectThreadInfo,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type {\n  ApiChat, ApiChatType, ApiContact, ApiInputMessageReplyInfo, ApiPeer, ApiUrlAuthResult,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsTrustedBot, selectMessageReplyInfo, selectSendAs, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId, url } = payload;\n    actions.openChat({ id: chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  let tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers,\n  updateMessageStatistics, updateStatistics, updateStatisticsGraph,\n} from '../../reducers';\nimport { selectChat, selectChatFullInfo, selectChatMessages } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updatePeerStory(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  return APP_VERSION_REGEX.test(sanitizedRemoteVersion) && sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER,\n  PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport { sendPushNotification } from '../../../util/tlCustomFunction';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { ...notification } = payload;\n  sendPushNotification(notification.message);\n  // const { tabId = getCurrentTabId(), ...notification } = payload;\n  // notification.localId = generateUniqueId();\n\n  // const newNotifications = [...selectTabState(global, tabId).notifications];\n  // const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  // if (existingNotificationIndex !== -1) {\n  //   newNotifications.splice(existingNotificationIndex, 1);\n  // }\n\n  // newNotifications.push(notification as ApiNotification);\n\n  // return updateTabState(global, {\n  //   notifications: newNotifications,\n  // }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (selectPeerStories(global, previousPeerId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectPeerStories(global, previousPeerId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectPeerStories(global, nextPeerId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { handleScrollUnactiveTab } from '../../../util/tlCustomFunction';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    handleScrollUnactiveTab();\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (() => false),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        allowAbsoluteHeader\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { sendScreenName } from '../../../util/tlCustomFunction';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon no-animation state-back',\n          // !hasMenu && 'state-back',\n          // shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  useEffect(() => {\n    if (isSearchFocused) {\n      sendScreenName('tl_navigation_mainScreen');\n    }\n  }, [isSearchFocused]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n            /**\n             * TL - Trigger hide hamburger menu when search input focused in\n             */\n            isSearchFocused ? 'custom-dropdown-invisible' : 'custom-dropdown-visible',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {/* <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          /> */}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n            'custom-style',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'gray' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {\n        /**\n         * TL - Fix header issue when ChatList screen is rendered\n         */\n      }\n      <div id=\"left-main-header\" className={`${content === LeftColumnContent.ChatList ? 'fix-issue' : ''}`}>\n        <LeftMainHeader\n          shouldHideSearch={isForumPanelVisible}\n          content={content}\n          contactsFilter={contactsFilter}\n          onSearchQuery={onSearchQuery}\n          onSelectSettings={handleSelectSettings}\n          onSelectContacts={handleSelectContacts}\n          onSelectArchived={handleSelectArchived}\n          onReset={onReset}\n          shouldSkipTransition={shouldSkipTransition}\n          isClosingSearch={isClosingSearch}\n        />\n      </div>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport { sendScreenName } from '../../util/tlCustomFunction';\nimport {\n  IS_APP, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      sendScreenName('tl_navigation_otherScreen');\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      sendScreenName('tl_navigation_otherScreen');\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      sendScreenName('tl_navigation_otherScreen');\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      if (content === LeftColumnContent.NewGroupStep1 || content === LeftColumnContent.NewChannelStep1) {\n        sendScreenName('tl_navigation_mainScreen');\n      }\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  useEffect(() => {\n    if (settingsScreen === SettingsScreens.Main && contentType === ContentType.Main\n      && !isChatOpen && !isForumPanelOpen) {\n      sendScreenName('tl_navigation_mainScreen');\n    } else {\n      sendScreenName('tl_navigation_otherScreen');\n    }\n  }, [settingsScreen, contentType, isChatOpen, isForumPanelOpen]);\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name=\"slide\"\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      className=\"tl-custom-padding\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SP9ygrz63JLi4xNqwoVE\",\"title\":\"Sw5A_K0ZxEX96Ui9lFCb\",\"gift\":\"Mtiki0kCz4W4kUdV8FK0\",\"count\":\"SgtGraFRcPrLtRnxw3gt\",\"section\":\"phMVInVgl42PoTFQfGqI\",\"description\":\"Vb0eOjCRZWXBFSaUyvx2\",\"channels\":\"_3mJaV4k42iv1TfpFUHbF\",\"channel\":\"RfJFPbFLakyaHV8YKBWt\",\"button\":\"NFt5nDqi5BykWcvrsjtU\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveawayInfo, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName, isApiPeerChat } from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const {\n    months, quantity, channelIds, untilDate, countries,\n  } = message.content.giveaway!;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [countries, lang.code]);\n\n  const handleChannelClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResults = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = channelIds.length ? channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResults ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    let secondKey = '';\n    if (isResults) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResults && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let lastParagraph = '';\n    if (isResults && giveawayInfo.isRefunded) {\n      lastParagraph = lang('BoostingGiveawayCanceledByPayment');\n    } else if (isResults) {\n      lastParagraph = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        <p>\n          {renderText(lastParagraph, ['simple_markdown'])}\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.gift}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={giftSticker}\n          play={canPlayAnimatedEmojis && hasEnded}\n          noLoop\n          nonInteractive\n          size={GIFT_STICKER_SIZE}\n        />\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n          <br />\n          {renderText(lang(\n            'ActionGiftPremiumSubtitle',\n            lang('Chat.Giveaway.Info.Months', months),\n          ), ['simple_markdown'])}\n        </p>\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n        </p>\n        <div className={styles.channels}>\n          {channelIds.map((channelId) => (\n            <PickerSelectedItem\n              peerId={channelId}\n              forceShowSelf\n              fluid\n              className={styles.channel}\n              clickArg={channelId}\n              onClick={handleChannelClick}\n            />\n          ))}\n        </div>\n        {countries?.length && (\n          <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n        )}\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n        </p>\n      </div>\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const duration = message.content.giveaway!.months;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, message.content.giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    return {\n      chat,\n      sender,\n      giftSticker: selectGiftStickerForDuration(global, duration),\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={false}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {giveaway && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            noUserColors={isOwn}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeEmojiInteractions, activeReactions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadTopMessageId;\n    const replyMessage = replyToMsgId && !shouldHideReply\n      ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId)\n      : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage) : forwardHeader && !isRepliesChat\n      ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessageInComments({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData, giveaway,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Button from '../../ui/Button';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { isLocalMessageId } from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n        if (!getGlobal().isArchivePrevious) {\n          sendScreenName('tl_navigation_mainScreen');\n        }\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories));\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  /**\n   * TL - Send a post message to Timeless Wallet\n   * Description: The data is an object with 2 properties: chatId and threadId\n   */\n  const handleSendCrypto = useCallback(() => {\n    (window as any).sendCrypto?.postMessage(JSON.stringify({\n      chatId,\n      threadId,\n    }));\n  }, [chatId, threadId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3>{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {\n                /**\n                 * TL - Custom send crypto button\n                 */\n                !isBot && Number(chatId) >= 0 && (\n                  <Button\n                    round\n                    color=\"translucent\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Send Crypto')}\n                    onClick={handleSendCrypto}\n                  >\n                    <img src=\"./wallet_24px.svg\" alt=\"\" />\n                  </Button>\n                )\n              }\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZtWHQyTLrCmeNE53Hvd9\",\"noResults\":\"cuYFx3gorhlWaUcBJ0Aj\",\"section-header\":\"IPPwOeRGhyQDYbJsBsdb\",\"sectionHeader\":\"IPPwOeRGhyQDYbJsBsdb\",\"section\":\"HMySq6RoeqoKdRuUAW7z\",\"user\":\"hben8jCvRhcyebFweulH\",\"stats\":\"dBHHnaU4CZ9TELAykZyA\",\"down\":\"nlFBjRF9YGIjCHGrt2cp\",\"loadMoreSpinner\":\"QBMARpR7dewZog5QmOkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { sendScreenName } from '../../util/tlCustomFunction';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  currentUserId,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useEffect(() => {\n    if (isMobile) {\n      if ((!isLeftColumnOpen && !isRightColumnOpen) || isRightColumnOpen) {\n        sendScreenName('tl_navigation_otherScreen');\n      }\n    }\n  }, [isMobile, isLeftColumnOpen, isMiddleColumnOpen, isRightColumnOpen]);\n\n  useEffect(() => {\n    if (isMobile) {\n      if ((!isLeftColumnOpen && !isRightColumnOpen) || isRightColumnOpen) {\n        sendScreenName('tl_navigation_otherScreen');\n      }\n    }\n  }, [isMobile, isLeftColumnOpen, isMiddleColumnOpen, isRightColumnOpen]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} currentUserId={currentUserId} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","push","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","map","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","IS_IOS","rafPromise","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","draftReplyInfo","selectDraft","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","resetDraftReplyInfo","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","currentDraft","isLocalOnly","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","selectThreadTopMessageId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","sendPushNotification","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","newNotifications","notifications","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","splice","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","localChat","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","handleScrollUnactiveTab","captureEvents","selectorToPreventScroll","onSwipe","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","allowAbsoluteHeader","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","size","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","onSearchQuery","onReset","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","lockScreen","isBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","sendScreenName","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","shouldSkipTransition","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","onSelectSettings","onSelectContacts","onSelectArchived","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","inlineButtons","dividend","getPeerIdDividend","lastUnreadMessageId","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","SwipeDirection","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","openComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","Avatar","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","quantity","untilDate","countries","hasEnded","translatedNames","DisplayNames","countryCode","isoToEmoji","of","handleChannelClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","noLoop","nonInteractive","forceShowSelf","formatDateTimeToString","ConfirmDialog","isOnlyConfirm","confirmHandler","isResults","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","secondKey","secondParagraph","activatedCount","lastParagraph","isRefunded","isWinner","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","label","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","isText","REACTION_SIZE","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","path","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","isChatWithSelf","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","replyToPeerId","replyFrom","storyReplyUserId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","replyToTopId","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","isComments","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","checked","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","isArchivePrevious","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","n","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","handleSendCrypto","sendCrypto","postMessage","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}