{"version":3,"file":"3779.d656bb1cf1a94a3d2782.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useState, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from './hooks/useCurrentTimeSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { animateNumber } from '../../util/animation';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from './hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV, ARE_WEBCODECS_SUPPORTED } from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport { handleSendLink } from '../../util/tlCustomFunction';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n    if (url) {\n      handleSendLink(url);\n    }\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUserName?: string;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUserName,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, currentUserName]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n  count: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  count,\n  onClick,\n}) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 1);\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          peer={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, idPrefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={idPrefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"syvgWO0b6lIEPd3iu1TA\",\"list-item\":\"_nKqEo7SgYwpaclSSCIx\",\"listItem\":\"_nKqEo7SgYwpaclSSCIx\",\"title\":\"R7LNh8TMqiktRuTuESsf\",\"subtitle\":\"so4259O2hcdGOxENXdqc\",\"languages\":\"DiSTH_4CZnPK8Dh8Tpfq\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  localContactIds,\n  localChatIds,\n  localUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState, TabState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n    };\n  };\n}\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    // eslint-disable-next-line no-console\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" id=\"tl-left-search\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    loadAuthorizations();\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useLastCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleCopyPrimaryClicked = useLastCallback(() => {\n    if (isDisabled) return;\n    copyLink(inviteLink);\n  });\n\n  const handleShare = useLastCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  });\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked} disabled={isDisabled}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={!url ? lang('Loading') : url}\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/windowEnvironment';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport {\n  playNotifySound,\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n} from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUserId: string;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\nconst PRELOAD_CONTACT = 10000;\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll\n      items={viewportIds}\n      onLoadMore={getMore}\n      preloadBackwards={PRELOAD_CONTACT}\n      noScrollRestoreOnTop\n      noScrollRestore\n      className=\"chat-list custom-scroll\"\n    >\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const backHandler = () => {\n    sendScreenName('tl_navigation_mainScreen');\n    getGlobal().isArchivePrevious = false;\n    onReset();\n  };\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={backHandler}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={cn('static-icon')}\n          src={staticIconData}\n          alt=\"\"\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName, { createClassNameBuilder } from '../../../util/buildClassName';\nimport {\n  isSameReaction, canSendReaction, getReactionUniqueKey, sortReactions,\n} from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  onShowMore: (position: IAnchorPosition) => void;\n  className?: string;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 6;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  onToggleReaction,\n  onShowMore,\n  className,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const availableReactions = useMemo(() => {\n    const reactions = allAvailableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }).filter(Boolean) || [];\n\n    return sortReactions(reactions, topReactions);\n  }, [allAvailableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions, topReactions]);\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useLastCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  });\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={buildClassName(cn('&', lang.isRtl && 'isRtl'), className)} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {reactionsToRender.map((reaction, i) => (\n            <ReactionSelectorReaction\n              key={getReactionUniqueKey(reaction.reaction)}\n              isReady={isReady}\n              onToggleReaction={onToggleReaction}\n              reaction={reaction}\n              noAppearAnimation={!canPlayAnimatedEmojis}\n              chosen={userReactionIndexes.has(i)}\n            />\n          ))}\n          {withMoreButton && (\n            <Button\n              color=\"translucent\"\n              className={cn('show-more')}\n              onClick={handleShowMoreClick}\n            >\n              <i className=\"icon icon-down\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport ReactionSelector from './ReactionSelector';\nimport AvatarList from '../../common/AvatarList';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: (ApiChat | ApiUser)[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, targetHref, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenReactionPicker}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n              <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {canShowReactionsCount && message.reactors?.count ? (\n                  canShowSeenBy && seenByDatesCount\n                    ? lang(\n                      'Chat.OutgoingContextMixedReactionCount',\n                      [message.reactors.count, seenByDatesCount],\n                    )\n                    : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                ) : (\n                  seenByDatesCount === 1 && seenByRecentPeers\n                    ? renderText(\n                      isUserId(seenByRecentPeers[0].id)\n                        ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                        : (seenByRecentPeers[0] as ApiChat).title,\n                    ) : (\n                      seenByDatesCount\n                        ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                        : lang('Conversation.ContextMenuNoViews')\n                    )\n                )}\n              </span>\n            </span>\n            <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectCanTranslateMessage,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n  selectRequestedChatTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n  isReactionPickerOpen,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, 3).map((id) => usersById[id] || chatsById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n  selectCanManage, selectIsRightColumnShown, selectCanTranslateChat,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectTabState,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  position,\n  isTranslucent,\n  withCustomReactions,\n}) => {\n  const { toggleReaction, closeReactionPicker } = getActions();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(isOpen ? styles.menu : styles.menuHidden, 'ReactionPicker')}\n      bubbleClassName={buildClassName(styles.menuContent, !withCustomReactions && styles.onlyReactions)}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !withCustomReactions}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={handleToggleCustomReaction}\n        onReactionSelect={handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const { chatId, messageId, position } = state.reactionPicker || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : false;\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuHidden\":\"_GhqQu5bWnxjhW_weHZe\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_ELECTRON, PRODUCTION_URL } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON ? PRODUCTION_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, 'sticker-set', isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSelect = useLastCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  });\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={isOpen ? 'CustomSendMenu with-menu-transitions' : 'CustomSendMenuHidden'}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      let senderPeer = message.senderId\n        ? selectUser(global, message.senderId) || selectChat(global, message.senderId)\n        : undefined;\n\n      if (!senderPeer && message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        const originalSender = isChannelPost && fromChatId ? selectChat(global, fromChatId) : undefined;\n        if (originalSender) senderPeer = originalSender;\n      }\n\n      if (!senderPeer) {\n        return undefined;\n      }\n\n      return {\n        message,\n        senderPeer: senderPeer!,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer: ApiUser | ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={senderPeer} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../global/helpers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiChat } from '../../api/types';\n\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"general\":\"CSjgq5gkTxM3iZQ9oJ9b\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePrevious(step, true);\n  const prevRequestId = usePrevious(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","SharedMedia","SearchResult","MiddleHeaderAvatar","SuggestedAvatar","ScheduledInline","Inline","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","slideClassName","Fragment","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleSendLink","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUserName","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","onCheck","getUserFullName","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","fill","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","root","wrapper","reverse","down","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","hexToRgb","_COLORS$Math$ceil","newIndex","colorA","colorB","r","g","b","lerpRgb","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","PremiumTranslate","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","entries","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","fullClassName","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","thumbCustomEmojiId","isVideos","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Picker","itemIds","lockedIds","onSelectedIdsChange","selectedIds","Badge","buttonBadge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","sort","leftId","rightId","handleCloseSeenByModal","noStatusOrTyping","formatDateAtTime","statusIcon","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","seenByUserIds","nextOffset","LoadMoreDirection","Backwards","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","contextActions","useChatContextActions","useSelectWithEnter","MuteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","a","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","Search","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","Experimental","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","Notifications","DataStorage","Privacy","Language","DoNotTranslate","Stickers","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyVoiceMessages","PrivacyGroupChats","PrivacyPhoneP2P","PrivacyPhoneCall","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","PasscodeDisabled","PasscodeEnabled","PasscodeNewPasscode","PasscodeNewPasscodeConfirm","PasscodeCongratulations","PasscodeTurnOff","PasscodeChangePasscodeCurrent","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","Folders","FoldersCreateFolder","FoldersShare","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersIncludedChatsFromChatList","FoldersExcludedChats","FoldersExcludedChatsFromChatList","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","setState","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","translation","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","onDragEnd","knobStyle","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","currentUser","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","settings","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","FoldersAll","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","itemName","FoldersNew","maxChats","filterValue","shouldHideChatTypes","onSelectedChatTypesChange","onFilterChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","useEffectWithPrevDeps","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","canTranslateChats","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","getPrivacyKey","screen","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","file","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","SettingsActiveSession","iconDevice","formatDateTimeToString","dateActive","box","appName","appVersion","ip","region","country","getLocation","note","actionHeader","actionName","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","avatar","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userMainUsername","renderContact","BlockUserModal","Lock","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","Congratulations","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","filterPlaceholder","searchInputId","isSearchable","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","prevIsActive","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","handleDownloadLog","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","preloadBackwards","noScrollRestore","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","isStepActive","NewChannelStep1","NewGroupStep1","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","backHandler","sendScreenName","isArchivePrevious","onTransitionEnd","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","cn","createClassNameBuilder","noAppearAnimation","chosen","onToggleReaction","mediaAppearData","appearAnimation","staticIconData","isAnimationLoaded","markAnimationLoaded","isFirstPlay","unmarkIsFirstPlay","activate","deactivate","onMouseEnter","allAvailableReactions","enabledReactions","currentReactions","maxUniqueReactions","onShowMore","canSendReaction","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","ReactionSelectorReaction","isReactionPickerOpen","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenReactionPicker","bubbleStyle","ReactionSelector","messagesCount","AvatarList","peers","MenuSeparator","Skeleton","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","selectIsReactionPickerOpen","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","reactionPicker","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","storedPosition","renderingPosition","withPortal","isDense","handleToggleCustomReaction","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","parseMessageInput","correctAnswers","solutionEntities","updateOption","newOptions","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","noReplaceNewlines","native","IS_ELECTRON","PRODUCTION_URL","image","LOADED_EMOJIS","onMouseDown","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderPeer","forwardInfo","isChannelPost","originalSender","foundResult","isOnTop","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","ChannelRemovedUsers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","ChatAdminRights","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","memberId","DeleteMemberModal","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","Invite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","JoinRequest","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","ManageUser","ManageGroup","GroupRecentActions","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","hasArrow","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","invoiceInfo","renderCheckoutItem","customIcon","provider","langStringSplit","renderTosLink","tosCheckbox","main","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","ConfirmPayment","setStep","nextStep","Checkout","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","shippingOption","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","ConfirmPassword","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","SavedPaymentCredentials","PasswordConfirm","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","MonkeyClose","playSegment","MonkeyPeek","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}